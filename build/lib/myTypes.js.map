{
  "version": 3,
  "sources": ["../../src/lib/myTypes.ts"],
  "sourcesContent": ["import { NetworkClient, NetworkClientFingerprint } from \"./api/network-types-client.js\";\r\nimport { NetworkDevice } from \"./api/network-types-device.js\";\r\nimport { NetworkDeviceModels } from './api/network-types-device-models.js'\r\nimport { NetworkWlanConfig } from \"./api/network-types-wlan-config.js\";\r\nimport { NetworkLanConfig } from \"./api/network-types-lan-config.js\";\r\nimport { FirewallGroup } from \"./api/network-types-firewall-group.js\";\r\n\r\nexport interface myCommonState {\r\n    id?: string,\r\n    iobType: ioBroker.CommonType,\r\n    name?: string,\r\n    role?: string,\r\n    read?: boolean,\r\n    write?: boolean,\r\n    unit?: string,\r\n    min?: number,\r\n    max?: number,\r\n    step?: number,\r\n    states?: { [key: string]: string } | { [key: number]: string },\r\n    expert?: true,\r\n    icon?: string,\r\n    def?: ioBroker.StateValue,\r\n    desc?: string,\r\n\r\n    readVal?(val: ioBroker.StateValue | NetworkClientFingerprint, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice | myNetworkClient, id: string): ioBroker.StateValue | Promise<ioBroker.StateValue>,\r\n    writeVal?(val: ioBroker.StateValue, adapter: ioBroker.Adapter, cache: myCache): ioBroker.StateValue | Promise<ioBroker.StateValue>,\r\n\r\n    valFromProperty?: string                                        // Take value from other property in the corresponding tree. If this property is an object, @link ./helper.ts [getAllKeysOfTreeDefinition] must added manual if they should be regoniczed\r\n    statesFromProperty?: string                                     // ToDo: perhaps can be removed\r\n\r\n    conditionToCreateState?(objDevice: any, adapter: ioBroker.Adapter): boolean     // condition to create state\r\n\r\n    subscribeMe?: true                                              // subscribe\r\n    required?: true                                                 // required, can not be blacklisted\r\n}\r\n\r\nexport interface myCommoneChannelObject {\r\n    idChannel?: string;\r\n    channelName?(objDevice: NetworkDevice | myNetworkClient, objChannel: any, adapter: ioBroker.Adapter): string;\r\n    icon?: string;\r\n    object: { [key: string]: myCommonState | myCommoneChannelObject; };\r\n}\r\n\r\nexport interface myCommonChannelArray {\r\n    idChannel?: string;\r\n    channelName?(objDevice: NetworkDevice | myNetworkClient, objChannel: any, adapter: ioBroker.Adapter): string;\r\n    icon?: string,\r\n    arrayChannelIdPrefix?: string,                                                                  // Array item id get a prefix e.g. myPrefix_0\r\n    arrayChannelIdZeroPad?: number,                                                                 // Array item id get a padding for the number\r\n    arrayChannelIdFromProperty?(objDevice: any, i: number, adapter: ioBroker.Adapter): string,      // Array item id is taken from a property in the corresponding tree\r\n    arrayChannelNamePrefix?: string,                                                                // Array item common.name get a prefix e.g. myPrefix_0\r\n    arrayChannelNameFromProperty?(objDevice: any, adapter: ioBroker.Adapter): string,               // Array item common.name is taken from a property in the corresponding tree\r\n    arrayStartNumber?: number,                                                                      // Array custom start number of array\r\n    array: { [key: string]: myCommonState; },\r\n}\r\n\r\nexport interface myNetworkClient extends NetworkClient {\r\n    isOnline: boolean;\r\n    timestamp: number;\r\n}\r\n\r\nexport interface ConnectedClients {\r\n    connected_clients: number;\r\n    connected_guests: number;\r\n    name: string;\r\n}\r\n\r\nexport enum WebSocketEventMessages {\r\n    client = 'client',\r\n    device = 'device:sync',\r\n    user = 'user:',\r\n    events = 'events',\r\n    speedTest = 'speed-test:update',\r\n    wlanConf = 'wlanconf:',\r\n    lanConf = 'networkconf',\r\n    firewallGroup = 'firewallgroup:'\r\n}\r\n\r\nexport const WebSocketEvent = {\r\n    device: {\r\n        Connected: ['EVT_SW_Connected', 'EVT_AP_Connected', 'EVT_GW_Connected', 'EVT_DM_Connected'],\r\n        Disconnected: ['EVT_SW_Disconnected', 'EVT_AP_Disconnected', 'EVT_GW_Disconnected', 'EVT_DM_Disconnected'],\r\n        Restarted: ['EVT_SW_Restarted', 'EVT_AP_Restarted', 'EVT_GW_Restarted'],\r\n        ChannelChanged: ['EVT_AP_ChannelChanged'],\r\n        LostContact: ['EVT_SW_Lost_Contact', 'EVT_DM_Lost_Contact', 'EVT_AP_Lost_Contact'],\r\n        PoeDisconnect: ['EVT_SW_PoeDisconnect'],\r\n        WANTransition: ['EVT_GW_WANTransition'],\r\n        Upgrade: ['EVT_SW_UpgradeScheduled', 'EVT_SW_Upgraded'],\r\n        Adopt: ['EVT_AP_AutoReadopted', 'EVT_SW_AutoReadopted']\r\n    },\r\n    client: {\r\n        Connected: ['EVT_WU_Connected', 'EVT_WG_Connected', 'EVT_LU_Connected', 'EVT_LG_Connected'],\r\n        Disconnected: ['EVT_WU_Disconnected', 'EVT_WG_Disconnected', 'EVT_LU_Disconnected', 'EVT_LG_Disconnected'],\r\n        Roamed: ['EVT_WU_Roam', 'EVT_WG_Roam'],\r\n        RoamedRadio: ['EVT_WU_RoamRadio', 'EVT_WG_RoamRadio'],\r\n        Blocked: ['EVT_WC_Blocked', 'EVT_LC_Blocked'],\r\n        Unblocked: ['EVT_WC_Unblocked', 'EVT_LC_Unblocked'],\r\n    },\r\n}\r\n\r\nexport interface myCache {\r\n    devices: { [key: string]: NetworkDevice; },\r\n    deviceModels: NetworkDeviceModels[],\r\n    clients: { [key: string]: myNetworkClient; },\r\n    vpn: { [key: string]: myNetworkClient; }\r\n    wlan: { [key: string]: NetworkWlanConfig; },\r\n    lan: { [key: string]: NetworkLanConfig; }\r\n    isOnline: { [key: string]: myIsOnline; }\r\n    firewallGroup: { [key: string]: FirewallGroup; }\r\n}\r\n\r\nexport interface myImgCache {\r\n    [key: string]: string[]\r\n}\r\n\r\nexport interface myIsOnline {\r\n    val: boolean;\r\n    wlan_id?: string | undefined;\r\n    network_id?: string | undefined;\r\n}\r\n\r\nexport interface JsonConfigAutocompleteSendTo {\r\n    value: string,\r\n    label: string\r\n}"],
  "mappings": "AAmEO,IAAK,yBAAL,kBAAKA,4BAAL;AACH,EAAAA,wBAAA,YAAS;AACT,EAAAA,wBAAA,YAAS;AACT,EAAAA,wBAAA,UAAO;AACP,EAAAA,wBAAA,YAAS;AACT,EAAAA,wBAAA,eAAY;AACZ,EAAAA,wBAAA,cAAW;AACX,EAAAA,wBAAA,aAAU;AACV,EAAAA,wBAAA,mBAAgB;AARR,SAAAA;AAAA,GAAA;AAWL,MAAM,iBAAiB;AAAA,EAC1B,QAAQ;AAAA,IACJ,WAAW,CAAC,oBAAoB,oBAAoB,oBAAoB,kBAAkB;AAAA,IAC1F,cAAc,CAAC,uBAAuB,uBAAuB,uBAAuB,qBAAqB;AAAA,IACzG,WAAW,CAAC,oBAAoB,oBAAoB,kBAAkB;AAAA,IACtE,gBAAgB,CAAC,uBAAuB;AAAA,IACxC,aAAa,CAAC,uBAAuB,uBAAuB,qBAAqB;AAAA,IACjF,eAAe,CAAC,sBAAsB;AAAA,IACtC,eAAe,CAAC,sBAAsB;AAAA,IACtC,SAAS,CAAC,2BAA2B,iBAAiB;AAAA,IACtD,OAAO,CAAC,wBAAwB,sBAAsB;AAAA,EAC1D;AAAA,EACA,QAAQ;AAAA,IACJ,WAAW,CAAC,oBAAoB,oBAAoB,oBAAoB,kBAAkB;AAAA,IAC1F,cAAc,CAAC,uBAAuB,uBAAuB,uBAAuB,qBAAqB;AAAA,IACzG,QAAQ,CAAC,eAAe,aAAa;AAAA,IACrC,aAAa,CAAC,oBAAoB,kBAAkB;AAAA,IACpD,SAAS,CAAC,kBAAkB,gBAAgB;AAAA,IAC5C,WAAW,CAAC,oBAAoB,kBAAkB;AAAA,EACtD;AACJ;",
  "names": ["WebSocketEventMessages"]
}
