{
  "version": 3,
  "sources": ["../../src/lib/i18n.ts"],
  "sourcesContent": ["// ToDo: taken from https://github.com/ioBroker/adapter-core/blob/master/src/i18n.ts\n// after adapter-core ^3.2.2 is default comming with js-controller 7.x this can be replace using utils.i18n\n\nimport { readFileSync, readdirSync, existsSync, statSync } from 'node:fs';\nimport { join } from 'node:path';\n\nlet language: ioBroker.Languages = 'en';\nlet words: null | Record<string, ioBroker.Translated> = null;\n\n/**\n * Init internationalization\n *\n * @param rootDir The path, where i18n directory is located\n * @param languageOrAdapter The adapter instance or the language to use\n */\nexport async function init(rootDir: string, languageOrAdapter: ioBroker.Adapter | ioBroker.Languages): Promise<void> {\n    let adapter: ioBroker.Adapter | undefined;\n    if (languageOrAdapter && typeof languageOrAdapter === 'object') {\n        adapter = languageOrAdapter;\n        const systemConfig = await adapter.getForeignObjectAsync('system.config');\n        if (systemConfig?.common.language) {\n            language = systemConfig?.common.language;\n        }\n    } else {\n        language = languageOrAdapter as ioBroker.Languages;\n    }\n\n    let files: string[];\n    if (existsSync(join(rootDir, 'i18n'))) {\n        files = readdirSync(join(rootDir, 'i18n'));\n    } else if (existsSync(join(rootDir, 'lib', 'i18n'))) {\n        rootDir = join(rootDir, 'lib');\n        files = readdirSync(join(rootDir, 'i18n'));\n    } else {\n        throw new Error('Cannot find i18n directory');\n    }\n\n    words = {};\n\n    let count = 0;\n    files.forEach((file: string) => {\n        if (file.endsWith('.json')) {\n            count++;\n            const lang: ioBroker.Languages = file.split('.')[0] as ioBroker.Languages;\n            const wordsForLanguage = JSON.parse(readFileSync(join(rootDir, 'i18n', file)).toString('utf8'));\n            Object.keys(wordsForLanguage).forEach((key: string) => {\n                if (words) {\n                    if (!words[key]) {\n                        words[key] = {} as ioBroker.Translated;\n                    }\n                    words[key][lang] = wordsForLanguage[key];\n                }\n            });\n        }\n    });\n\n    if (!count) {\n        // may be it is an old structure: i18n/lang/translation.json\n        files.forEach((file: string) => {\n            if ((file.match(/^[a-z]{2}$/) || file === 'zh-cn') && statSync(join(rootDir, 'i18n', file)).isDirectory()) {\n                if (adapter) {\n                    // adapter.log.warn(\n                    //     'Looks like you use old structure of i18n. ' +\n                    //     'Please switch to 1i8n/lang.json instead of i18n/lang/translation.json',\n                    // );\n                }\n                const lang: ioBroker.Languages = file as ioBroker.Languages;\n                if (existsSync(join(rootDir, 'i18n', lang, 'translations.json'))) {\n                    const wordsForLanguage = JSON.parse(\n                        readFileSync(join(rootDir, 'i18n', lang, 'translations.json')).toString('utf8'),\n                    );\n                    Object.keys(wordsForLanguage).forEach((key: string) => {\n                        if (words) {\n                            if (!words[key]) {\n                                words[key] = {} as ioBroker.Translated;\n                            }\n                            words[key][lang] = wordsForLanguage[key];\n                        }\n                    });\n                }\n            }\n        });\n    }\n}\n\n/**\n * Get translation as one string\n *\n * @param key Word to translate\n * @param args Optional parameters to replace %s\n */\nexport function translate(key: string, ...args: (string | number | boolean | null)[]): string {\n    if (!words) {\n        throw new Error(\"i18n not initialized. Please call 'init(__dirname, adapter)' before\");\n    }\n    if (!words[key]) {\n        return key;\n    }\n    let text = words[key][language] || words[key].en || key;\n    if (args.length) {\n        for (const arg of args) {\n            text = text.replace('%s', arg === null ? 'null' : arg.toString());\n        }\n    }\n    return text;\n}\n\n/**\n * Get translation as ioBroker.Translated object\n *\n * @param key Word to translate\n * @param args Optional parameters to replace %s\n */\nexport function getTranslatedObject(key: string, ...args: (string | number | boolean | null)[]): ioBroker.Translated {\n    if (!words) {\n        throw new Error(\"i18n not initialized. Please call 'init(__dirname, adapter)' before\");\n    }\n\n    if (words[key]) {\n        const word = words[key];\n        if (word.en && word.en.includes('%s')) {\n            const result: Partial<ioBroker.Translated> = {};\n            Object.keys(word).forEach((lang: string) => {\n                for (const arg of args) {\n                    (result as Record<string, string>)[lang] = (word as Record<string, string>)[lang].replace(\n                        '%s',\n                        arg === null ? 'null' : arg.toString(),\n                    );\n                }\n            });\n            return result as ioBroker.Translated;\n        }\n\n        return words[key];\n    }\n\n    return {\n        en: key,\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
