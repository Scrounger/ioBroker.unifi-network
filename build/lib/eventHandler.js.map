{
  "version": 3,
  "sources": ["../../src/lib/eventHandler.ts"],
  "sourcesContent": ["import { NetworkEventMeta, NetworkEventData, NetworkEventSpeedTest } from \"./api/network-types.js\";\r\nimport { WebSocketEvent, myCache, myNetworkClient } from \"./myTypes.js\";\r\nimport * as myHelper from './helper.js';\r\nimport { NetworkWlanConfig } from \"./api/network-types-wlan-config.js\";\r\nimport { NetworkLanConfig } from \"./api/network-types-lan-config.js\";\r\nimport * as tree from './tree/index.js'\r\nimport moment from \"moment\";\r\nimport { FirewallGroup } from \"./api/network-types-firewall-group.js\";\r\n\r\nlet disconnectDebounceList = {};\r\n\r\nexport const eventHandler = {\r\n    device: {\r\n        async restarted(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.device.restarted]:'\r\n\r\n            try {\r\n                const mac: string = data.sw || data.ap || data.gw;\r\n\r\n                if (mac) {\r\n                    if (adapter.config.devicesEnabled) {\r\n                        if (await adapter.objectExists(`${tree.device.idChannel}.${mac}.isOnline`)) {\r\n                            await adapter.setStateChangedAsync(`${tree.device.idChannel}.${mac}.isOnline`, false, true);\r\n                        }\r\n\r\n                        adapter.log.info(`${logPrefix} '${cache?.devices[mac]?.name}' (mac: ${mac}) is going to restart`);\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'restarted' has no mac address! (meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)})`);\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n        async connected(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.device.connected]:'\r\n\r\n            try {\r\n                const mac: string = data.sw || data.ap || data.gw\r\n                const connected = WebSocketEvent.device.Connected.includes(data.key);\r\n\r\n                if (mac) {\r\n                    if (adapter.config.devicesEnabled) {\r\n                        adapter.log.info(`${logPrefix} '${cache?.devices[mac]?.name}' (mac: ${mac}) ${connected ? 'connected' : 'disconnected'}`);\r\n\r\n                        if (await adapter.objectExists(`${tree.device.idChannel}.${mac}.isOnline`)) {\r\n                            await adapter.setStateChangedAsync(`${tree.device.idChannel}.${mac}.isOnline`, connected, true);\r\n                        }\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'connected / disconnected' has no mac address! (meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)})`);\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n        async speedTest(event: NetworkEventSpeedTest, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.device.speedTest]:'\r\n\r\n            try {\r\n                const mac = event.meta.mac;\r\n\r\n                for (let data of event.data) {\r\n                    if (!Object.hasOwn(data, 'upload-progress') && !Object.hasOwn(data, 'download-progress')) {\r\n                        const wan = cache.devices[mac]?.wan1?.ifname === data.interface_name ? 'wan1' : cache.devices[mac]?.wan2?.ifname === data.interface_name ? 'wan2' : 'wan1';\r\n\r\n                        adapter.log.debug(`${logPrefix} speedtest event (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(data)})`);\r\n\r\n                        if (wan) {\r\n                            const idChannel = `${tree.device.idChannel}.${mac}.${wan}`;\r\n\r\n\r\n                            if (await adapter.objectExists(`${idChannel}.speedtest_download`)) {\r\n                                await adapter.setState(`${idChannel}.speedtest_download`, { val: data.xput_download, lc: data.rundate * 1000 }, true);\r\n                            }\r\n                            if (await adapter.objectExists(`${idChannel}.speedtest_upload`)) {\r\n                                await adapter.setState(`${idChannel}.speedtest_upload`, { val: data.xput_upload, lc: data.rundate * 1000 }, true);\r\n                            }\r\n                            if (await adapter.objectExists(`${idChannel}.latency`)) {\r\n                                await adapter.setState(`${idChannel}.latency`, { val: data.latency, lc: data.rundate * 1000 }, true);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, event: ${JSON.stringify(event)}`);\r\n            }\r\n        },\r\n        async lostContact(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.device.lostContact]:'\r\n\r\n            try {\r\n                const mac: string = data.sw || data.ap || data.gw\r\n\r\n                if (mac) {\r\n                    if (adapter.config.devicesEnabled) {\r\n                        adapter.log.info(`${logPrefix} '${cache?.devices[mac]?.name}' (mac: ${mac}) 'lost contact'`);\r\n\r\n                        if (await adapter.objectExists(`${tree.device.idChannel}.${mac}.isOnline`)) {\r\n                            await adapter.setStateChangedAsync(`${tree.device.idChannel}.${mac}.isOnline`, false, true);\r\n                        }\r\n\r\n                        if (await adapter.objectExists(`${tree.device.idChannel}.${mac}.state`)) {\r\n                            await adapter.setStateChangedAsync(`${tree.device.idChannel}.${mac}.state`, 0, true);\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'lost contact' has no mac address! (meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)})`);\r\n                }\r\n\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n        async wanTransition(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.device.wanTransition]:'\r\n\r\n            try {\r\n                const mac: string = data.gw || data.dm\r\n                const ifname: string = data.iface\r\n\r\n                if (mac) {\r\n                    if (adapter.config.devicesEnabled) {\r\n                        const idWanInterface = cache?.devices[mac]?.wan1?.ifname === ifname ? 'wan1' : cache?.devices[mac]?.wan2?.ifname === ifname ? 'wan2' : undefined;\r\n\r\n                        if (idWanInterface) {\r\n                            adapter.log.info(`${logPrefix} '${cache?.devices[mac]?.name}' (mac: ${mac}) '${idWanInterface} transition', state: ${data.state}`);\r\n\r\n                            const isOnlineId = `devices.${mac}.isp.${idWanInterface}.isOnline`\r\n\r\n                            if (await adapter.objectExists(isOnlineId)) {\r\n                                await adapter.setStateChangedAsync(isOnlineId, data.state !== 'inactive', true);\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'lost contact' has no mac address! (meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)})`);\r\n                }\r\n\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n    },\r\n    client: {\r\n        async connected(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.client.connected]:'\r\n\r\n            try {\r\n                const mac: string = data.user || data.guest;\r\n                const connected = WebSocketEvent.client.Connected.includes(data.key);\r\n                const isGuest = data.guest ? true : false;\r\n\r\n                if (mac) {\r\n                    if ((!isGuest && adapter.config.clientsEnabled) || (isGuest && adapter.config.guestsEnabled)) {\r\n                        const id = `${isGuest ? tree.client.idChannelGuests : tree.client.idChannelUsers}.${mac}.isOnline`;\r\n\r\n                        if (connected || adapter.config.clientRealtimeDisconnectDebounceTime === 0) {\r\n                            if (data.subsystem === 'wlan') {\r\n                                adapter.log.info(`${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' ${connected ? 'connected' : 'disconnected'} (mac: ${mac}${cache?.clients[mac]?.ip ? `, ip: ${cache?.clients[mac]?.ip}` : ''}) ${connected ? 'to' : 'from'} '${data.ssid}' on '${data.ap_displayName || data.ap_name}'`);\r\n                            } else {\r\n                                adapter.log.info(`${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' ${connected ? 'connected' : 'disconnected'} (mac: ${mac}${cache?.clients[mac]?.ip ? `, ip: ${cache?.clients[mac]?.ip}` : ''})`);\r\n                            }\r\n\r\n                            if (delete disconnectDebounceList[mac]) delete disconnectDebounceList[mac];\r\n\r\n                            if (await adapter.objectExists(id)) {\r\n                                await adapter.setState(id, connected, true);\r\n                            }\r\n                        } else {\r\n                            disconnectDebounceList[mac] = moment().valueOf();\r\n\r\n                            let logMsg = `${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' ${connected ? 'connected' : 'disconnected'} (mac: ${mac}${cache?.clients[mac]?.ip ? `, ip: ${cache?.clients[mac]?.ip}` : ''})`\r\n                            if (data.subsystem === 'wlan') {\r\n                                logMsg = `${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' ${connected ? 'connected' : 'disconnected'} (mac: ${mac}${cache?.clients[mac]?.ip ? `, ip: ${cache?.clients[mac]?.ip}` : ''}) ${connected ? 'to' : 'from'} '${data.ssid}' on '${data.ap_displayName || data.ap_name}'`;\r\n                            }\r\n\r\n                            adapter.log.debug(`${logMsg} -> debounce disconnection for ${adapter.config.clientRealtimeDisconnectDebounceTime}s`);\r\n\r\n                            // debounce disconnection if it's configured\r\n                            setTimeout(async () => {\r\n                                if (disconnectDebounceList[mac]) {\r\n                                    adapter.log.info(logMsg);\r\n\r\n                                    if (await adapter.objectExists(id)) {\r\n                                        await adapter.setState(id, connected, true);\r\n                                    }\r\n                                } else {\r\n                                    adapter.log.debug(`${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' 're-connected' in the debounce time, nothing to do`);\r\n                                }\r\n\r\n                                if (delete disconnectDebounceList[mac]) delete disconnectDebounceList[mac];\r\n\r\n                            }, adapter.config.clientRealtimeDisconnectDebounceTime * 1000);\r\n                        }\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'connected / disconnected' has no mac address! (meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)})`);\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n        async roamed(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.client.roamed]:'\r\n\r\n            try {\r\n                const mac: string = data.user || data.guest;\r\n                const isGuest = data.guest ? true : false;\r\n\r\n                if (mac && data.ap_from && data.ap_to) {\r\n                    if ((!isGuest && adapter.config.clientsEnabled) || (isGuest && adapter.config.guestsEnabled)) {\r\n                        adapter.log.debug(`${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' (mac: ${mac}, ip: ${cache?.clients[mac]?.ip}) roamed from '${cache?.devices[data.ap_from]?.name}' (mac: ${data.ap_from}) to '${cache?.devices[data.ap_to]?.name}' (mac: ${data.ap_to})`);\r\n\r\n                        const idApName = `${isGuest ? tree.client.idChannelGuests : tree.client.idChannelUsers}.${mac}.uplink_name`;\r\n                        if (await adapter.objectExists(idApName)) {\r\n                            await adapter.setState(idApName, cache?.devices[data.ap_to]?.name ? cache?.devices[data.ap_to]?.name : null, true);\r\n                        }\r\n\r\n                        const idApMac = `${isGuest ? tree.client.idChannelGuests : tree.client.idChannelUsers}.${mac}.uplink_mac`;\r\n                        if (await adapter.objectExists(idApMac)) {\r\n                            await adapter.setState(idApMac, (data.ap_to) ? (data.ap_to) : null, true);\r\n                        }\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'roam' has no mac or ap information! (data: ${JSON.stringify(data)})`);\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n        async roamedRadio(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.client.roamedRadio]:'\r\n\r\n            try {\r\n                const mac: string = data.user || data.guest;\r\n                const isGuest = data.guest ? true : false;\r\n\r\n                if (mac && data.channel_from && data.channel_to && data.ap) {\r\n                    if ((!isGuest && adapter.config.clientsEnabled) || (isGuest && adapter.config.guestsEnabled)) {\r\n                        adapter.log.debug(`${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' (mac: ${mac}) roamed radio from channel '${data.channel_from}' to '${data.channel_to}' on '${cache?.devices[data.ap]?.name || data.ap_displayName || data.ap_name}' (mac: ${cache?.devices[data.ap]?.mac || data.ap})`);\r\n\r\n                        const idChannel = `${isGuest ? tree.client.idChannelGuests : tree.client.idChannelUsers}.${mac}.channel`;\r\n                        const valChannel = parseInt(data.channel_to);\r\n                        if (await adapter.objectExists(idChannel)) {\r\n                            await adapter.setState(idChannel, valChannel, true);\r\n                        }\r\n\r\n                        const idChannelName = `${isGuest ? tree.client.idChannelGuests : tree.client.idChannelUsers}.${mac}.channel_frequency`;\r\n                        if (await adapter.objectExists(idChannelName)) {\r\n                            await adapter.setState(idChannelName, myHelper.radioToFrequency(data.radio_to, adapter), true);\r\n                        }\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'roam radio' has no mac or ap information! (data: ${JSON.stringify(data)})`);\r\n                }\r\n\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n        async block(meta: NetworkEventMeta, data: NetworkEventData, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.client.block]:'\r\n\r\n            try {\r\n                const mac: string = data.client;\r\n\r\n                if (mac) {\r\n                    if (cache && cache.clients && cache.clients[mac]) {\r\n                        const isGuest = cache.clients[mac].is_guest;\r\n                        const blocked = data.key.includes('_Blocked');\r\n\r\n                        const id = `${isGuest ? tree.client.idChannelGuests : tree.client.idChannelUsers}.${mac}.blocked`;\r\n\r\n                        adapter.log.info(`${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache?.clients[mac]?.name}' ${blocked ? 'blocked' : 'unblocked'} (mac: ${mac}${cache?.clients[mac]?.ip ? `, ip: ${cache?.clients[mac]?.ip}` : ''})`);\r\n\r\n                        if (await adapter.objectExists(id)) {\r\n                            await adapter.setState(id, blocked, true);\r\n                        }\r\n                    }\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'connected / disconnected' has no mac address! (meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)})`);\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n        async vpnDisconnect(meta: NetworkEventMeta, data: myNetworkClient, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.client.vpnDisconnect]:'\r\n\r\n            try {\r\n                if (data.ip && data.network_id) {\r\n                    const preparedIp = data.ip.replaceAll('.', '_');\r\n\r\n                    const id = `vpn.${data.network_id}.${preparedIp}.isOnline`;\r\n\r\n                    if (await adapter.objectExists(id)) {\r\n                        await adapter.setState(id, false, true);\r\n                    }\r\n\r\n                    adapter.log.info(`${logPrefix} vpn client '${cache?.vpn[data.ip]?.name}' 'disconnected' (ip: ${cache?.vpn[data.ip]?.ip}, remote_ip: ${cache?.vpn[data.ip]?.remote_ip})`);\r\n                } else {\r\n                    adapter.log.warn(`${logPrefix} event 'vpn disconnected' has no ip address! (meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)})`);\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        }\r\n    },\r\n    user: {\r\n        async clientRemoved(meta: NetworkEventMeta, data: { [key: string]: boolean | number | object | string } | any, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.user.clientRemoved]:'\r\n\r\n            try {\r\n                if (adapter.config.keepIobSynchron && cache && cache.clients && cache.clients[data.mac as string]) {\r\n                    const mac = data.mac;\r\n                    const isGuest = cache.clients[mac as string].is_guest;\r\n                    const idChannel = `${isGuest ? tree.client.idChannelGuests : tree.client.idChannelUsers}.${mac}`\r\n\r\n                    if (await adapter.objectExists(idChannel)) {\r\n                        await adapter.delObjectAsync(idChannel, { recursive: true });\r\n                        adapter.log.info(`${logPrefix} ${isGuest ? 'guest' : 'client'} '${cache.clients[mac as string].name}' deleted, because it's removed by the unifi-controller`);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        },\r\n    },\r\n    wlanConf: {\r\n        async deleted(meta: NetworkEventMeta, data: NetworkWlanConfig[] | any, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.wlanConf.deleted]:'\r\n\r\n            try {\r\n                if (data && adapter.config.keepIobSynchron) {\r\n                    for (let wlan of data) {\r\n                        const idChannel = `${tree.wlan.idChannel}.${wlan._id}`\r\n\r\n                        if (await adapter.objectExists(idChannel)) {\r\n                            await adapter.delObjectAsync(idChannel, { recursive: true });\r\n                            adapter.log.debug(`${logPrefix} wlan '${wlan.name}' (channel: ${idChannel}) deleted`);\r\n                        }\r\n\r\n                        if (adapter.config.devicesEnabled) {\r\n                            const devices = await adapter.getStatesAsync(`${tree.device.idChannel}.*.wlan.*.id`);\r\n\r\n                            for (const id in devices) {\r\n                                if (devices[id].val === wlan._id) {\r\n                                    const idChannel = myHelper.getIdWithoutLastPart(id);\r\n\r\n                                    if (await adapter.objectExists(idChannel)) {\r\n                                        await adapter.delObjectAsync(idChannel, { recursive: true });\r\n                                        adapter.log.debug(`${logPrefix} wlan '${wlan.name}' deleted from device (channel: ${idChannel})`);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        }\r\n    },\r\n    lanConf: {\r\n        async deleted(meta: NetworkEventMeta, data: NetworkLanConfig[] | any, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.lanConf.deleted]:'\r\n\r\n            try {\r\n                if (data && adapter.config.keepIobSynchron) {\r\n                    for (let lan of data) {\r\n                        const idChannel = `${tree.lan.idChannel}.${lan._id}`\r\n\r\n                        if (await adapter.objectExists(idChannel)) {\r\n                            await adapter.delObjectAsync(idChannel, { recursive: true });\r\n                            adapter.log.debug(`${logPrefix} lan '${lan.name}' (channel: ${idChannel}) deleted`);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        }\r\n    },\r\n    firewallGroup: {\r\n        async deleted(meta: NetworkEventMeta, data: FirewallGroup[] | any, adapter: ioBroker.Adapter, cache: myCache) {\r\n            const logPrefix = '[eventHandler.firewallGroup.deleted]:'\r\n\r\n            try {\r\n                if (data && adapter.config.keepIobSynchron) {\r\n                    for (let firewallGroup of data) {\r\n                        const idChannel = `${tree.firewallGroup.idChannel}.${firewallGroup._id}`\r\n\r\n                        if (await adapter.objectExists(idChannel)) {\r\n                            await adapter.delObjectAsync(idChannel, { recursive: true });\r\n                            adapter.log.debug(`${logPrefix} firewall group '${firewallGroup.name}' (channel: ${idChannel}) deleted`);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                adapter.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}, meta: ${JSON.stringify(meta)}, data: ${JSON.stringify(data)}`);\r\n            }\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["_a", "idChannel"]
}
