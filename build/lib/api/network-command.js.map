{
  "version": 3,
  "sources": ["../../../src/lib/api/network-command.ts"],
  "sourcesContent": ["import { NetworkApi, ApiEndpoints } from \"./network-api.js\";\r\nimport { NetworkDevice } from \"./network-types-device.js\";\r\n\r\nexport const apiCommands = {\r\n    devices: {\r\n        async restart(ufn: NetworkApi, mac: string): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.deviceCommand)}`, { cmd: 'restart', mac: mac.toLowerCase() });\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async port_cyclePoePower(ufn: NetworkApi, mac: string, port_idx: number, device: NetworkDevice) {\r\n            const logPrefix = '[apiCommands.cyclePoePortPower]'\r\n\r\n            try {\r\n                const port_table = device.port_table;\r\n\r\n                if (port_table && port_table.length > 0) {\r\n                    const indexOfPort = port_table.findIndex(x => x.port_idx === port_idx);\r\n\r\n                    if (indexOfPort !== -1) {\r\n                        if (!port_table[indexOfPort].poe_enable) {\r\n                            ufn.log.error(`${logPrefix} ${device.name} (mac: ${device.mac}) - Port ${port_idx}: cycle poe power not possible, because poe is not enabled for this port!`);\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.deviceCommand)}`, { cmd: 'power-cycle', port_idx: port_idx, mac: mac.toLowerCase() });\r\n                return result === null ? false : true;\r\n\r\n            } catch (error) {\r\n                ufn.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n            }\r\n\r\n            return false;\r\n        },\r\n        async port_switchPoe(val: boolean, port_idx: number, ufn: NetworkApi, device: NetworkDevice): Promise<boolean> {\r\n            const logPrefix = '[apiCommands.switchPoePort]'\r\n\r\n            let port_overrides = device.port_overrides;\r\n\r\n            if (port_overrides && port_overrides.length > 0) {\r\n                const indexOfPort = port_overrides.findIndex(x => x.port_idx === port_idx);\r\n\r\n                if (indexOfPort !== -1) {\r\n\r\n                    // port_overrides has settings for this port\r\n                    if (port_overrides[indexOfPort].portconf_id) {\r\n                        // ethernet profil is configured, change poe not possible\r\n                        ufn.log.error(`${logPrefix} ${device.name} (mac: ${device.mac}) - Port ${port_idx}: switch poe not possible, because 'ethernet port profile' is configured!`);\r\n                        return false;\r\n                    } else {\r\n                        port_overrides[indexOfPort].poe_mode = val ? 'auto' : 'off';\r\n                    }\r\n                } else {\r\n                    // port_overrides has no settings for this port\r\n                    ufn.log.debug(`${logPrefix} ${device.name} (mac: ${device.mac}) - Port ${port_idx}: not exists in port_overrides object -> create item`);\r\n                    port_overrides[indexOfPort].poe_mode = val ? 'auto' : 'off';\r\n                }\r\n\r\n                const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.deviceRest)}/${device.device_id.trim()}`, { port_overrides: port_overrides }, 'PUT');\r\n\r\n                return result === null ? false : true;\r\n\r\n            } else {\r\n                ufn.log.debug(`${logPrefix} ${device.name} (mac: ${device.mac}) - Port ${port_idx}: no port_overrides object exists!`);\r\n\r\n                return false;\r\n            }\r\n        },\r\n        async ledOverride(val: string, ufn: NetworkApi, device: NetworkDevice): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.deviceRest)}/${device.device_id.trim()}`, { led_override: val }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async upgrade(ufn: NetworkApi, device: NetworkDevice): Promise<boolean> {\r\n            const logPrefix = '[apiCommands.upgrade]'\r\n\r\n            if (device.upgradable) {\r\n                const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.deviceCommand)}/upgrade`, { mac: device.mac.toLowerCase() });\r\n\r\n                return result === null ? false : true;\r\n            } else {\r\n                ufn.log.warn(`${logPrefix} ${device.name} (mac: ${device.mac}): upgrade not possible, no new firmware avaiable`);\r\n            }\r\n\r\n            return false;\r\n        },\r\n        async runSpeedtest(ufn: NetworkApi, interface_name: string | undefined = undefined): Promise<boolean> {\r\n            let payload: any = { cmd: 'speedtest' }\r\n\r\n            if (interface_name) {\r\n                payload.interface_name = interface_name\r\n            }\r\n\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.deviceCommand)}`, payload);\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async disableAccessPoint(ufn: NetworkApi, ap_id: string, disabled: boolean): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.deviceRest)}/${ap_id.trim()}`, { disabled: disabled }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        }\r\n    },\r\n    clients: {\r\n        async block(ufn: NetworkApi, mac: string): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.clientCommand)}`, { cmd: 'block-sta', mac: mac.toLowerCase() });\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async unblock(ufn: NetworkApi, mac: string): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.clientCommand)}`, { cmd: 'unblock-sta', mac: mac.toLowerCase() });\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async reconncet(ufn: NetworkApi, mac: string): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.clientCommand)}`, { cmd: 'kick-sta', mac: mac.toLowerCase() });\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async authorizeGuest(ufn: NetworkApi, mac: string): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.clientCommand)}`, { cmd: 'authorize-guest', mac: mac.toLowerCase() });\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async unauthorizeGuest(ufn: NetworkApi, mac: string): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.clientCommand)}`, { cmd: 'unauthorize-guest', mac: mac.toLowerCase() });\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async setName(ufn: NetworkApi, user_id: string, name: string): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.clients)}/${user_id.trim()}`, { _id: user_id, name: name }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        }\r\n\r\n\r\n        // async remove(ufn: NetworkApi, mac: string) {\r\n        //     // controller 5.9.x only\r\n        //     const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.clientCommand)}`, { cmd: 'forget-sta', mac: mac.toLowerCase() });\r\n\r\n        //     return result === null ? false : true;\r\n        // },\r\n    },\r\n    wlanConf: {\r\n        async enable(ufn: NetworkApi, wlan_id: string, enabled: boolean): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.wlanConfig)}/${wlan_id.trim()}`, { enabled: enabled }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        }\r\n    },\r\n    lanConf: {\r\n        async enable(ufn: NetworkApi, lan_id: string, enabled: boolean): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.lanConfig)}/${lan_id.trim()}`, { enabled: enabled }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async internet_access_enabled(ufn: NetworkApi, lan_id: string, enabled: boolean): Promise<boolean> {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.lanConfig)}/${lan_id.trim()}`, { internet_access_enabled: enabled }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        }\r\n    },\r\n    firewallGroup: {\r\n        async setName(ufn: NetworkApi, firewallGroup_id: string, name: string) {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.firewallGroup)}/${firewallGroup_id.trim()}`, { name: name }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        },\r\n        async setGroupMembers(ufn: NetworkApi, firewallGroup_id: string, members: string) {\r\n            const result = await ufn.sendData(`${ufn.getApiEndpoint(ApiEndpoints.firewallGroup)}/${firewallGroup_id.trim()}`, { group_members: JSON.parse(members) }, 'PUT');\r\n\r\n            return result === null ? false : true;\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
