{
  "version": 3,
  "sources": ["../../../src/lib/api/network-api.ts"],
  "sourcesContent": ["// Lib imports\r\nimport { ALPNProtocol, AbortError, FetchError, Headers, Request, RequestOptions, Response, context, timeoutSignal } from '@adobe/fetch';\r\nimport { EventEmitter } from 'node:events';\r\nimport WebSocket from 'ws';\r\n\r\n// API imports\r\nimport { API_ERROR_LIMIT, API_RETRY_INTERVAL, API_TIMEOUT } from './network-settings.js';\r\nimport { NetworkLogging } from './network-logging.js';\r\nimport { NetworkEvent } from './network-types.js'\r\nimport { NetworkDevice, NetworkDevice_V2 } from './network-types-device.js'\r\nimport { NetworkDeviceModels } from './network-types-device-models.js'\r\nimport { NetworkClient } from './network-types-client.js';\r\nimport { NetworkWlanConfig, NetworkWlanConfig_V2 } from './network-types-wlan-config.js';\r\nimport { NetworkLanConfig_V2 } from './network-types-lan-config.js';\r\nimport { NetworkReportInterval, NetworkReportStats, NetworkReportType } from './network-types-report-stats.js';\r\nimport { SystemLogType } from './network-types-system-log.js';\r\nimport { FirewallGroup } from './network-types-firewall-group.js';\r\n\r\nexport class NetworkApi extends EventEmitter {\r\n    private logPrefix: string = 'NetworkApi'\r\n\r\n    // private adapter: ioBroker.Adapter;\r\n\r\n    private apiErrorCount: number;\r\n    private apiLastSuccess: number;\r\n    private fetch: (url: string | Request, options?: RequestOptions) => Promise<Response>;\r\n    private headers: Headers;\r\n\r\n    public log: NetworkLogging;\r\n\r\n    private host: string;\r\n    private port: string;\r\n    isUnifiOs: boolean;\r\n    public site: string;\r\n    private password: string;\r\n    private username: string;\r\n\r\n    private _eventsWs: WebSocket | null;\r\n\r\n    constructor(host: string, port: number, isUnifiOs: boolean, site: string, username: string, password: string, log: NetworkLogging = console) {\r\n        // Initialize our parent.\r\n        super();\r\n\r\n        this.log = log;\r\n\r\n        this._eventsWs = null;\r\n\r\n        this.apiErrorCount = 0;\r\n        this.apiLastSuccess = 0;\r\n        this.fetch = context({ alpnProtocols: [ALPNProtocol.ALPN_HTTP2], rejectUnauthorized: false, userAgent: 'unifi-network' }).fetch;\r\n        this.headers = new Headers();\r\n\r\n        this.host = host;\r\n        this.port = isUnifiOs ? '' : `:${port}`;\r\n        this.isUnifiOs = isUnifiOs;\r\n        this.site = site;\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n\r\n    public async login(): Promise<boolean> {\r\n        const logPrefix = `[${this.logPrefix}.login]`\r\n\r\n        try {\r\n            this.logout();\r\n\r\n            // Let's attempt to login.\r\n            const loginSuccess = await this.loginController();\r\n\r\n            // Publish the result to our listeners\r\n            this.emit('login', loginSuccess);\r\n\r\n            // Return the status of our login attempt.\r\n            return loginSuccess;\r\n\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Login to the UniFi Network API.\r\n    private async loginController(): Promise<boolean> {\r\n        const logPrefix = `[${this.logPrefix}.loginController]`\r\n\r\n        try {\r\n            // If we're already logged in, we're done.\r\n            if (this.headers.has('Cookie') && this.headers.has('X-CSRF-Token')) {\r\n\r\n                // this.log.debug(`${logPrefix} we are already logged in to the controller`);\r\n                return true;\r\n            }\r\n\r\n            // Acquire a CSRF token, if needed. We only need to do this if we aren't already logged in, or we don't already have a token.\r\n            if (!this.headers.has('X-CSRF-Token')) {\r\n\r\n                // UniFi OS has cross-site request forgery protection built into it's web management UI. We retrieve the CSRF token, if available, by connecting to the Network\r\n                // controller and checking the headers for it.\r\n                const response = await this.retrieve(`https://${this.host}${this.port}`, { method: 'GET' });\r\n\r\n                if (response?.ok) {\r\n                    const csrfToken = response.headers.get('X-CSRF-Token');\r\n\r\n                    // Preserve the CSRF token, if found, for future API calls.\r\n                    if (csrfToken) {\r\n\r\n                        this.headers.set('X-CSRF-Token', csrfToken);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Log us in.\r\n            const response = await this.retrieve(this.getApiEndpoint(ApiEndpoints.login), {\r\n\r\n                body: JSON.stringify({ password: this.password, rememberMe: true, token: '', username: this.username }),\r\n                method: 'POST'\r\n            });\r\n\r\n            // Something went wrong with the login call, possibly a controller reboot or failure.\r\n            if (!response?.ok) {\r\n\r\n                this.logout();\r\n\r\n                return false;\r\n            }\r\n\r\n            // We're logged in. Let's configure our headers.\r\n            const csrfToken = response.headers.get('X-Updated-CSRF-Token') ?? response.headers.get('X-CSRF-Token');\r\n            const cookie = response.headers.get('Set-Cookie');\r\n\r\n            // Save the refreshed cookie and CSRF token for future API calls and we're done.\r\n            if (cookie) {\r\n\r\n                // Only preserve the token element of the cookie and not the superfluous information that's been added to it.\r\n                this.headers.set('Cookie', cookie.split(';')[0]);\r\n\r\n                // Save the CSRF token.\r\n                if (csrfToken && csrfToken !== null) {\r\n                    // unifi OS\r\n                    this.headers.set('X-CSRF-Token', csrfToken);\r\n                } else {\r\n                    // self hosted controller, extract from cookie\r\n                    if (cookie.includes('csrf_token=')) {\r\n                        let extractCsrf = cookie.split(';').map(c => c.trim()).find(c => c.includes('csrf_token='));\r\n                        extractCsrf = extractCsrf.split('csrf_token=').pop();\r\n\r\n                        this.headers.set('X-CSRF-Token', extractCsrf);\r\n\r\n                        this.log.debug(`${logPrefix} csrf token extracted from cookie`);\r\n                    } else {\r\n                        this.log.warn(`${logPrefix} cookie not have a csrf token! ${JSON.stringify(cookie)}`)\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                this.log.debug(`${logPrefix} successfully logged into the controller (host: ${this.host}${this.port}, site: ${this.site}, isUnifiOs: ${this.isUnifiOs})`);\r\n                return true;\r\n            }\r\n\r\n            // Clear out our login credentials.\r\n            this.logout();\r\n\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * Clear the login credentials and terminate any open connection to the UniFi Network API.\r\n     *\r\n     * @category Authentication\r\n     */\r\n    public logout(): void {\r\n        const logPrefix = `[${this.logPrefix}.logout]`\r\n\r\n        try {\r\n            // Close any connection to the Network API.\r\n            this.reset();\r\n\r\n            // Save our CSRF token, if we have one.\r\n            const csrfToken = this.headers?.get('X-CSRF-Token');\r\n\r\n            // Initialize the headers we need.\r\n            this.headers = new Headers();\r\n            this.headers.set('Content-Type', 'application/json');\r\n\r\n            // Restore the CSRF token if we have one.\r\n            if (csrfToken) {\r\n                this.headers.set('X-CSRF-Token', csrfToken);\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Terminate any open connection to the UniFi Network API.\r\n     *\r\n     * @category Utilities\r\n     */\r\n    public reset(): void {\r\n        this._eventsWs?.terminate();\r\n        this._eventsWs = null;\r\n    }\r\n\r\n    /**\r\n     * Execute an HTTP fetch request to the Network controller.\r\n     *\r\n     * @param url       - Complete URL to execute **without** any additional parameters you want to pass.\r\n     * @param options   - Parameters to pass on for the endpoint request.\r\n     *\r\n     * @returns Returns a promise that will resolve to a Response object successful, and `null` otherwise.\r\n     *\r\n     * @remarks This method should be used when direct access to the Network controller is needed, or when this library doesn't have a needed method to access\r\n     *   controller capabilities. `options` must be a\r\n     *   [Fetch API compatible](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#options) request options object.\r\n     *\r\n     * @category API Access\r\n     */\r\n    public async retrieve(url: string, options: RequestOptions = { method: 'GET' }): Promise<Response | null> {\r\n\r\n        return this._retrieve(url, options);\r\n    }\r\n\r\n    /**\r\n     * Execute an HTTP fetch request to the Network controller and retriev data as json\r\n     * @param url       Complete URL to execute **without** any additional parameters you want to pass.\r\n     * @param options   Parameters to pass on for the endpoint request.\r\n     * @param retry     Retry once if we have an issue\r\n     * @returns         Returns a promise json object\r\n     */\r\n    public async retrievData(url: string, options: RequestOptions = { method: 'GET' }, retry: boolean = true): Promise<any | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.retrievData]`\r\n\r\n        try {\r\n            // Log us in if needed.\r\n            if (!(await this.loginController())) {\r\n\r\n                return retry ? this.retrievData(url, options, false) : undefined;\r\n            }\r\n\r\n            const response = await this.retrieve(url, options);\r\n\r\n            if (response && response !== null) {\r\n                if (!response.ok) {\r\n                    // Something went wrong. Retry the bootstrap attempt once, and then we're done.\r\n                    this.log.error(`${logPrefix} Unable to retrieve data. code: ${response?.status}, text: ${response?.statusText}, url: ${url}`);\r\n\r\n                    return retry ? this.retrievData(url, options, false) : undefined;\r\n                } else {\r\n                    const data = await response.json();\r\n\r\n                    if (data) {\r\n                        return data;\r\n                    }\r\n                }\r\n            }\r\n        } catch (error: any) {\r\n            if (error instanceof FetchError) {\r\n                this.log.error(`${logPrefix} FetchError error: ${JSON.stringify(error)}`);\r\n            } else if (error.includes('is not valid JSON')) {\r\n                this.log.error(`${logPrefix} Network controller service is unavailable. This is usually temporary and will occur during device reboots.`);\r\n            } else {\r\n                this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    // Internal interface to communicating HTTP requests with a Network controller, with error handling.\r\n    private async _retrieve(url: string, options: RequestOptions = { method: 'GET' }, decodeResponse = true, isRetry = false): Promise<Response | null> {\r\n        const logPrefix = `[${this.logPrefix}._retrieve]`\r\n\r\n        // Catch Network controller server-side issues:\r\n        //\r\n        // 400: Bad request.\r\n        // 404: Not found.\r\n        // 429: Too many requests.\r\n        // 500: Internal server error.\r\n        // 502: Bad gateway.\r\n        // 503: Service temporarily unavailable.\r\n        const isServerSideIssue = (code: number): boolean => [400, 404, 429, 500, 502, 503].some(x => x === code);\r\n\r\n        let response: Response;\r\n\r\n        // Create a signal handler to deliver the abort operation.\r\n        const signal = timeoutSignal(API_TIMEOUT);\r\n\r\n        options.headers = this.headers;\r\n        options.signal = signal;\r\n\r\n        try {\r\n\r\n            const now = Date.now();\r\n\r\n            // Throttle this after API_ERROR_LIMIT attempts.\r\n            if (this.apiErrorCount >= API_ERROR_LIMIT) {\r\n\r\n                // Let the user know we've got an API problem.\r\n                if (this.apiErrorCount === API_ERROR_LIMIT) {\r\n\r\n                    this.log.error(`Throttling API calls due to errors with the ${this.apiErrorCount} previous attempts. Pausing communication with the Network controller for ${API_RETRY_INTERVAL / 60} minutes.`);\r\n                    this.apiErrorCount++;\r\n                    this.apiLastSuccess = now;\r\n                    this.reset();\r\n\r\n                    return null;\r\n                }\r\n\r\n                // Check to see if we are still throttling our API calls.\r\n                if ((this.apiLastSuccess + (API_RETRY_INTERVAL * 1000)) > now) {\r\n\r\n                    return null;\r\n                }\r\n\r\n                // Inform the user that we're out of the penalty box and try again.\r\n                this.log.error(`Resuming connectivity to the UniFi Network API after pausing for ${API_RETRY_INTERVAL / 60} minutes.`);\r\n\r\n                this.apiErrorCount = 0;\r\n                this.reset();\r\n\r\n                if (!(await this.loginController())) {\r\n\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            response = await this.fetch(url, options);\r\n\r\n            // The caller will sort through responses instead of us.\r\n            if (!decodeResponse) {\r\n\r\n                return response;\r\n            }\r\n\r\n            // Preemptively increase the error count.\r\n            this.apiErrorCount++;\r\n\r\n            // Bad username and password.\r\n            if (response.status === 401) {\r\n\r\n                this.logout();\r\n                this.log.error(`${logPrefix} code: ${response.status} - Invalid login credentials given. Please check your login and password.`);\r\n\r\n                return null;\r\n            }\r\n\r\n            // Insufficient privileges.\r\n            if (response.status === 403) {\r\n\r\n                this.log.error(`${logPrefix} code: ${response.status} - Insufficient privileges for this user. Please check the roles assigned to this user and ensure it has sufficient privileges.`);\r\n\r\n                return null;\r\n            }\r\n\r\n            // Insufficient privileges.\r\n            if (response.status === 429) {\r\n\r\n                this.log.error(`${logPrefix} code: ${response.status} - Too many requests. Please check the settings at your unifi network controller or wait a while and restart the connection`);\r\n\r\n                return null;\r\n            }\r\n\r\n            if (response.status === 503) {\r\n                this.log.error(`${logPrefix} code: ${response.status} - Network controller service is unavailable. This is usually temporary and will occur during device reboots.`);\r\n\r\n                return null;\r\n            }\r\n\r\n            if (!response.ok && isServerSideIssue(response.status)) {\r\n\r\n                this.log.error(`${logPrefix} code: ${response.status} - Unable to connect to the Network controller. This is usually temporary and will occur during device reboots.`);\r\n\r\n                return null;\r\n            }\r\n\r\n            // Some other unknown error occurred.\r\n            if (!response.ok) {\r\n\r\n                this.log.error(`${logPrefix} code: ${response.status} - ${response.statusText}`);\r\n\r\n                return null;\r\n            }\r\n\r\n            this.apiLastSuccess = Date.now();\r\n            this.apiErrorCount = 0;\r\n\r\n            return response;\r\n        } catch (error) {\r\n\r\n            this.apiErrorCount++;\r\n\r\n            if (error instanceof AbortError) {\r\n\r\n                this.log.error(`${logPrefix} Network controller is taking too long to respond to a request. This error can usually be safely ignored.`);\r\n                this.log.debug(`${logPrefix} Original request was: ${url}`);\r\n\r\n                return null;\r\n            }\r\n\r\n            if (error instanceof FetchError) {\r\n\r\n                switch (error.code) {\r\n\r\n                    case 'ECONNREFUSED':\r\n                    case 'EHOSTDOWN':\r\n                    case 'ERR_HTTP2_STREAM_CANCEL':\r\n                    case 'ERR_HTTP2_STREAM_ERROR':\r\n\r\n                        this.log.error(`${logPrefix} Connection refused.`);\r\n\r\n                        break;\r\n\r\n                    case 'ECONNRESET':\r\n\r\n                        // Retry on connection reset, but no more than once.\r\n                        if (!isRetry) {\r\n\r\n                            return this._retrieve(url, options, decodeResponse, true);\r\n                        }\r\n\r\n                        this.log.error(`${logPrefix} Network connection to Network controller has been reset.`);\r\n\r\n                        break;\r\n\r\n                    case 'ENOTFOUND':\r\n\r\n                        this.log.error(`${logPrefix} Hostname or IP address not found: ${this.host}${this.port}. Please ensure the address you configured for this UniFi Network controller is correct.`);\r\n\r\n\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        // If we're logging when we have an error, do so.\r\n                        this.log.error(`${logPrefix} ${error.code} - ${error.message}`);\r\n\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        } finally {\r\n\r\n            // Clear out our response timeout if needed.\r\n            signal.clear();\r\n        }\r\n    }\r\n\r\n    public async sendData(cmd: string, payload: any, method: 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS' | 'PATCH' = 'POST'): Promise<Response> {\r\n        const logPrefix = `[${this.logPrefix}.sendData]`\r\n\r\n        let url = `https://${this.host}${this.port}${this.isUnifiOs ? '/proxy/network' : ''}${cmd}`\r\n\r\n        if (cmd.startsWith('https://')) {\r\n            url = cmd\r\n        }\r\n\r\n        this.log.debug(`${logPrefix} url: ${url}, body: ${JSON.stringify(payload)}, method: ${method}`);\r\n\r\n        return await this.retrieve(url, {\r\n            body: JSON.stringify(payload),\r\n            method: method\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detailed list of all devices on site\r\n     * @param mac optional: mac address to receive only the data for this device\r\n     * @returns \r\n     */\r\n    public async getDevices(mac: string | undefined = undefined): Promise<NetworkDevice[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getDevices]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint(ApiEndpoints.devices)}${mac ? `/${mac.trim()}` : ''}`);\r\n\r\n            if (res && res.data && res.data.length > 0) {\r\n                return res.data;\r\n            }\r\n\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * API V2 - Detailed list of all devices on site\r\n     * @param mac optional: mac address to receive only the data for this device\r\n     * @returns \r\n     */\r\n    public async getDevices_V2(separateUnmanaged: boolean = false, includeTrafficUsage: boolean = false): Promise<NetworkDevice_V2 | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getDevices_V2]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint_V2(ApiEndpoints_V2.devices)}?separateUnmanaged=${separateUnmanaged}&includeTrafficUsage=${includeTrafficUsage}`);\r\n\r\n            if (res) {\r\n                return res;\r\n            }\r\n\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * List of all active (connected) clients\r\n     * @returns \r\n     */\r\n    public async getClientsActive(): Promise<NetworkClient[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getClientsActive]`\r\n\r\n        try {\r\n            const res = await this.retrievData(this.getApiEndpoint(ApiEndpoints.clientsActive));\r\n\r\n            if (res && res.data && res.data.length > 0) {\r\n                return res.data;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *  V2 API - List of all active (connected) clients\r\n     * @returns \r\n     */\r\n    public async getClientsActive_V2(mac: string = undefined, includeTrafficUsage: boolean = false, includeUnifiDevices: boolean = true): Promise<NetworkClient[] | NetworkClient | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getClientsActive_V2]`\r\n\r\n        try {\r\n            const url = `${this.getApiEndpoint_V2(ApiEndpoints_V2.clientsActive)}${mac ? `/${mac}` : ''}?includeTrafficUsage=${includeTrafficUsage}&includeUnifiDevices=${includeUnifiDevices}`\r\n            const res = await this.retrievData(url);\r\n\r\n            if (res && res.length > 0) {\r\n                return res;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * List of all configured / known clients on the site\r\n     * @returns \r\n     */\r\n    public async getClients(): Promise<NetworkClient[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getClients]`\r\n\r\n        try {\r\n            const res = await this.retrievData(this.getApiEndpoint(ApiEndpoints.clients));\r\n\r\n            if (res && res.data && res.data.length > 0) {\r\n                return res.data;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     *  V2 API - List of all disconnected clients\r\n     * @returns \r\n     */\r\n    public async getClientsHistory_V2(withinHour: number = 0, includeUnifiDevices: boolean = true): Promise<NetworkClient[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getClientsHistory_V2]`\r\n\r\n        try {\r\n            const url = `${this.getApiEndpoint_V2(ApiEndpoints_V2.clientsHistory)}?includeUnifiDevices=${includeUnifiDevices}&withinHours=${withinHour}`\r\n            const res = await this.retrievData(url);\r\n\r\n            if (res && res.length > 0) {\r\n                return res;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * List all WLan configurations\r\n     * @param wlan_id optional: wlan id to receive only the configuration for this wlan\r\n     * @returns \r\n     */\r\n    public async getWlanConfig(wlan_id = undefined): Promise<NetworkWlanConfig[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getWlanConfig]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint(ApiEndpoints.wlanConfig)}${wlan_id ? `/${wlan_id.trim()}` : ''}`);\r\n\r\n            if (res && res.data && res.data.length > 0) {\r\n                return res.data;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * API V2 - List all WLan configurations\r\n     * @returns \r\n     */\r\n    public async getWlanConfig_V2(): Promise<NetworkWlanConfig_V2[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getWlanConfig]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint_V2(ApiEndpoints_V2.wlanConfig)}`);\r\n\r\n            if (res && res.length > 0) {\r\n                return res;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * List all LAN configurations\r\n     * @param network_id optional: network id to receive only the configuration for this wlan\r\n     * @returns \r\n     */\r\n    public async getLanConfig(network_id = undefined): Promise<NetworkWlanConfig[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getLanConfig]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint(ApiEndpoints.lanConfig)}${network_id ? `/${network_id.trim()}` : ''}`);\r\n\r\n            if (res && res.data && res.data.length > 0) {\r\n                return res.data;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * API V2 - List all Lan configurations\r\n     * @returns \r\n     */\r\n    public async getLanConfig_V2(): Promise<NetworkLanConfig_V2[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getLanConfig_V2]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint_V2(ApiEndpoints_V2.lanConfig)}`);\r\n\r\n            if (res && res.length > 0) {\r\n                return res;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n      * API V2 - List model information for devices\r\n      * @returns \r\n      */\r\n    public async getDeviceModels_V2(model: string = undefined): Promise<NetworkDeviceModels[] | NetworkDeviceModels | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getWlanConfig]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint_V2(ApiEndpoints_V2.models)}${model ? `/${model}` : ''}`);\r\n\r\n            if (res && res.model_list && res.model_list.length > 0) {\r\n                return res.model_list;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * List all LAN configurations\r\n     * @param firewallGroup_id optional: network id to receive only the configuration for this wlan\r\n     * @returns \r\n     */\r\n    public async getFirewallGroup(firewallGroup_id = undefined): Promise<FirewallGroup[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getFirewallGroup]`\r\n\r\n        try {\r\n            const res = await this.retrievData(`${this.getApiEndpoint(ApiEndpoints.firewallGroup)}${firewallGroup_id ? `/${firewallGroup_id.trim()}` : ''}`);\r\n\r\n            if (res && res.data && res.data.length > 0) {\r\n                return res.data;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public async testConnection(): Promise<boolean> {\r\n        const logPrefix = `[${this.logPrefix}.testConnection]`\r\n\r\n        try {\r\n            const res = await this.retrieve(`${this.getApiEndpoint(ApiEndpoints.self)}`);\r\n\r\n            if (res?.ok) {\r\n                return true;\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * get statistics for site, gateway, switches or access points\r\n     * @param type report type @see reportType\r\n     * @param interval report interval @see reportInterval\r\n     * @param attrs filter by attributes @see NetworkReportStats\r\n     * @param mac filter by mac\r\n     * @param start repot start timestamp\r\n     * @param end report end timestamp\r\n     * @returns \r\n     */\r\n    public async getReportStats(type: NetworkReportType, interval: NetworkReportInterval, attrs: (keyof NetworkReportStats)[] | 'ALL' = undefined, mac: string = undefined, start: number = undefined, end: number = undefined): Promise<NetworkReportStats[] | undefined> {\r\n        const logPrefix = `[${this.logPrefix}.getReportStats]`\r\n\r\n        try {\r\n            const url = `https://${this.host}${this.port}${this.isUnifiOs ? '/proxy/network' : ''}/api/s/${this.site}/stat/report/${interval}.${type}`;\r\n\r\n            if (!end) {\r\n                end = Date.now()\r\n            }\r\n\r\n            if (!start) {\r\n                if (interval === NetworkReportInterval['5minutes']) {\r\n                    // 5 minutes: default 1h\r\n                    start = end - (1 * 3600 * 1000);\r\n                } else if (interval === NetworkReportInterval.hourly) {\r\n                    // hourly: default 24h\r\n                    start = end - (7 * 24 * 3600 * 1000);\r\n                } else if (interval === NetworkReportInterval.daily) {\r\n                    // daily: default 1 week\r\n                    start = end - (1 * 7 * 24 * 3600 * 1000);\r\n                } else {\r\n                    // monthly: default 26 weeks\r\n                    start = end - (26 * 7 * 24 * 3600 * 1000);\r\n                }\r\n            }\r\n\r\n            if (!attrs) {\r\n                attrs = ['time']\r\n            } else if (attrs !== 'ALL') {\r\n                attrs = ['time', ...attrs];\r\n            } else {\r\n                attrs = ['bytes', 'cpu', 'lan-num_sta', 'mem', 'num_sta', 'rx_bytes', 'time', 'tx_bytes', 'wan-rx_bytes', 'wan-tx_bytes', 'wlan-num_sta', 'wlan_bytes']\r\n            }\r\n\r\n            const payload = {\r\n                attrs: attrs,\r\n                start,\r\n                end,\r\n                mac: mac\r\n            };\r\n\r\n            const res = await this.retrievData(url, {\r\n                method: 'POST',\r\n                body: payload\r\n            });\r\n\r\n            if (res && res.data && res.data.length > 0) {\r\n                return res.data;\r\n            }\r\n\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public async getSystemLog(type: SystemLogType, page_number: number = 0, pages_size: number = 10, start: number = undefined, end: number = undefined, macs: string[] = undefined) {\r\n        const logPrefix = `[${this.logPrefix}.getSystemLog]`\r\n\r\n        try {\r\n            const url = `https://${this.host}${this.port}${this.isUnifiOs ? '/proxy/network' : ''}/v2/api/site/${this.site}/system-log/${type}`;\r\n            this.log.warn(url);\r\n            if (!end) {\r\n                end = Date.now()\r\n            }\r\n\r\n            if (!start) {\r\n                // default: 1 day\r\n                start = end - (1 * 24 * 3600 * 1000);\r\n            }\r\n\r\n            const payload = {\r\n                timestampFrom: start,\r\n                timestampTo: end,\r\n                pageNumber: page_number,\r\n                pageSize: pages_size\r\n            };\r\n\r\n            if (type === SystemLogType.critical) {\r\n                payload['nextAiCategory'] = ['CLIENT', 'DEVICE', 'INTERNET', 'VPN'];\r\n            } else if (type === SystemLogType.devices) {\r\n                if (!macs) payload['macs'] = macs;\r\n            } else if (type === SystemLogType.admin) {\r\n                payload['activity_keys'] = ['ACCESSED_NETWORK_WEB', 'ACCESSED_NETWORK_IOS', 'ACCESSED_NETWORK_ANDROID'];\r\n                payload['change_keys'] = ['CLIENT', 'DEVICE', 'HOTSPOT', 'INTERNET', 'NETWORK', 'PROFILE', 'ROUTING', 'SECURITY', 'SYSTEM', 'VPN', 'WIFI'];\r\n            } else if (type === SystemLogType.updates) {\r\n                payload['systemLogDeviceTypes'] = ['GATEWAYS', 'SWITCHES', 'ACCESS_POINT', 'SMART_POWER', 'BUILDING_TO_BUILDING_BRIDGES', 'UNIFI_LTE'];\r\n            } else if (type === SystemLogType.clients) {\r\n                payload['clientType'] = ['GUEST', 'TELEPORT', 'VPN', 'WIRELESS', 'RADIUS', 'WIRED'];\r\n                payload['guestAuthorizationMethod'] = ['FACEBOOK_SOCIAL_GATEWAY', 'FREE_TRIAL', 'GOOGLE_SOCIAL_GATEWAY', 'NONE', 'PASSWORD', 'PAYMENT', 'RADIUS', 'VOUCHER'];\r\n            } else if (type === SystemLogType.threats) {\r\n                payload['threatTypes'] = ['HONEYPOT', 'THREAT'];\r\n            } else if (type === SystemLogType.triggers) {\r\n                payload['triggerTypes'] = ['TRAFFIC_RULE', 'TRAFFIC_ROUTE', 'FIREWALL_RULE'];\r\n            }\r\n\r\n\r\n            const res = await this.retrievData(url, {\r\n                method: 'POST',\r\n                body: payload\r\n            });\r\n\r\n            if (res) {\r\n                return res;\r\n            }\r\n\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    public getApiEndpoint(endpoint: ApiEndpoints): string {\r\n        //https://ubntwiki.com/products/software/unifi-controller/api\r\n\r\n        let endpointSuffix: string;\r\n        let endpointPrefix: string = this.isUnifiOs ? '/proxy/network' : '';\r\n\r\n        switch (endpoint) {\r\n            case ApiEndpoints.login:\r\n                endpointPrefix = '/api/';\r\n                endpointSuffix = this.isUnifiOs ? 'auth/login' : 'login';\r\n                break;\r\n\r\n            case ApiEndpoints.self:\r\n                endpointPrefix = '/api/';\r\n                endpointSuffix = this.isUnifiOs ? 'users/self' : 'self';\r\n                break;\r\n\r\n            case ApiEndpoints.devices:\r\n                endpointSuffix = `/api/s/${this.site}/stat/device`;\r\n                break;\r\n\r\n            case ApiEndpoints.deviceRest:\r\n                endpointSuffix = `/api/s/${this.site}/rest/device`;\r\n                break;\r\n\r\n            case ApiEndpoints.deviceCommand:\r\n                endpointSuffix = `/api/s/${this.site}/cmd/devmgr`;\r\n                break;\r\n\r\n            case ApiEndpoints.clients:\r\n                endpointSuffix = `/api/s/${this.site}/rest/user`;\r\n                break;\r\n\r\n            case ApiEndpoints.clientsActive:\r\n                endpointSuffix = `/api/s/${this.site}/stat/sta`;\r\n                break;\r\n\r\n            case ApiEndpoints.clientCommand:\r\n                endpointSuffix = `/api/s/${this.site}/cmd/stamgr`;\r\n                break;\r\n\r\n            case ApiEndpoints.wlanConfig:\r\n                endpointSuffix = `/api/s/${this.site}/rest/wlanconf`;\r\n                break;\r\n\r\n            case ApiEndpoints.lanConfig:\r\n                endpointSuffix = `/api/s/${this.site}/rest/networkconf`;\r\n                break;\r\n\r\n            case ApiEndpoints.firewallGroup:\r\n                endpointSuffix = `/api/s/${this.site}/rest/firewallgroup`;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (!endpointSuffix) {\r\n\r\n            return '';\r\n        }\r\n\r\n        return `https://${this.host}${this.port}${endpointPrefix}${endpointSuffix}`\r\n    }\r\n\r\n    public getApiEndpoint_V2(endpoint: ApiEndpoints_V2): string {\r\n        //https://ubntwiki.com/products/software/unifi-controller/api\r\n\r\n        let endpointSuffix: string;\r\n        let endpointPrefix: string = this.isUnifiOs ? '/proxy/network' : '';\r\n\r\n        switch (endpoint) {\r\n            case ApiEndpoints_V2.devices:\r\n                endpointSuffix = `/v2/api/site/${this.site}/device`;\r\n                break;\r\n\r\n            case ApiEndpoints_V2.clientsActive:\r\n                endpointSuffix = `/v2/api/site/${this.site}/clients/active`;\r\n                break;\r\n\r\n            case ApiEndpoints_V2.clientsHistory:\r\n                endpointSuffix = `/v2/api/site/${this.site}/clients/history`;\r\n                // onlyNonBlocked=false\r\n                // onlyBlocked=true\r\n                break;\r\n\r\n            case ApiEndpoints_V2.wlanConfig:\r\n                endpointSuffix = `/v2/api/site/${this.site}/wlan/enriched-configuration`;\r\n                break;\r\n\r\n            case ApiEndpoints_V2.lanConfig:\r\n                endpointSuffix = `/v2/api/site/${this.site}/lan/enriched-configuration`;\r\n                break;\r\n\r\n            case ApiEndpoints_V2.models:\r\n                endpointSuffix = `/v2/api/site/${this.site}/models`;\r\n                break;\r\n\r\n            default:\r\n                endpointSuffix = ''\r\n                break;\r\n        }\r\n\r\n        if (!endpointSuffix) {\r\n            return '';\r\n        }\r\n\r\n        return `https://${this.host}${this.port}${endpointPrefix}${endpointSuffix}`\r\n    }\r\n\r\n    public async launchEventsWs(): Promise<boolean> {\r\n        const logPrefix = `[${this.logPrefix}.launchEventsWs]`\r\n\r\n        try {\r\n            // Log us in if needed.\r\n            if (!(await this.loginController())) {\r\n\r\n                return false;\r\n            }\r\n\r\n            // If we already have a listener, we're already all set.\r\n            if (this._eventsWs) {\r\n\r\n                return true;\r\n            }\r\n\r\n            const url = `wss://${this.host}${this.port}${this.isUnifiOs ? '/proxy/network' : ''}/wss/s/${this.site}/events?clients=v2&next_ai_notifications=true&critical_notifications=true`\r\n\r\n            const ws = new WebSocket(url, {\r\n                headers: {\r\n                    Cookie: this.headers.get('Cookie') ?? ''\r\n                },\r\n\r\n                rejectUnauthorized: false\r\n            });\r\n\r\n            if (!ws) {\r\n\r\n                this.log.error('Unable to connect to the realtime update events API. Will retry again later.');\r\n                this._eventsWs = null;\r\n\r\n                return false;\r\n            }\r\n\r\n            let messageHandler: ((data: string) => void) | null;\r\n\r\n            // Cleanup after ourselves if our websocket closes for some resaon.\r\n            ws.once('close', (): void => {\r\n\r\n                this._eventsWs = null;\r\n\r\n                if (messageHandler) {\r\n\r\n                    ws.removeListener('message', messageHandler);\r\n                    messageHandler = null;\r\n                }\r\n            });\r\n\r\n            // Handle any websocket errors.\r\n            ws.once('error', (error: Error): void => {\r\n\r\n                this._eventsWs = null;\r\n\r\n                // If we're closing before fully established it's because we're shutting down the API - ignore it.\r\n                if (error.message !== 'WebSocket was closed before the connection was established') {\r\n                    if (error.message === 'Unexpected server response: 502' || error.message === 'Unexpected server response: 503' || error.message === 'Unexpected server response: 200') {\r\n                        this.log.error(`${logPrefix} Network controller - WebSocket service is unavailable. This is usually temporary and will occur during device reboots.`);\r\n                    } else {\r\n                        this.log.error(`${logPrefix} ws error: ${error.message}, stack: ${error.stack}`);\r\n                    }\r\n                }\r\n\r\n                ws.removeListener('message', messageHandler);\r\n                ws.terminate();\r\n            });\r\n\r\n            // Process messages as they come in.\r\n            ws.on('message', messageHandler = (data: string): void => {\r\n                try {\r\n                    if (data.toString().toLowerCase() === 'pong') {\r\n                        this.log.warn('PONG');\r\n                    }\r\n                    if (data.toString() === 'pong') {\r\n                        this.log.warn('PONG');\r\n                    }\r\n                    const event: NetworkEvent = JSON.parse(data.toString());\r\n\r\n                    if (event) {\r\n                        this.emit(\"message\", event);\r\n                    }\r\n                } catch (error: any) {\r\n                    this.log.error(`${logPrefix} ws error: ${error.message}, stack: ${error.stack}`);\r\n                }\r\n            });\r\n\r\n            ws.on('pong', messageHandler = (data: string): void => {\r\n                try {\r\n                    this.emit(\"pong\");\r\n                    this.log.silly ? this.log.silly(`pong received`) : this.log.debug(`pong received`);\r\n                } catch (error: any) {\r\n                    this.log.error(`${logPrefix} ws error: ${error.message}, stack: ${error.stack}`);\r\n                }\r\n            });\r\n\r\n            // Make the websocket available, and then we're done.\r\n            this._eventsWs = ws;\r\n\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public wsSendPing(): void {\r\n        const logPrefix = `[${this.logPrefix}.wsSendPing]`\r\n\r\n        try {\r\n            if (this._eventsWs && this._eventsWs !== null) {\r\n                this._eventsWs.ping();\r\n                this.log.silly ? this.log.silly(`ping sent`) : this.log.debug(`ping sent`);\r\n            }\r\n        } catch (error: any) {\r\n            this.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n        }\r\n    }\r\n}\r\n\r\nexport enum ApiEndpoints {\r\n    login = 'login',\r\n    self = 'self',\r\n    devices = 'devices',\r\n    deviceRest = 'deviceRest',\r\n    deviceCommand = 'deviceCommand',\r\n    clients = 'clients',\r\n    clientsActive = \"clientsActive\",\r\n    clientCommand = \"clientCommand\",\r\n    wlanConfig = 'wlanConfig',\r\n    lanConfig = 'lanConfig',\r\n    firewallGroup = 'firewallGroup',\r\n\r\n}\r\n\r\nexport enum ApiEndpoints_V2 {\r\n    devices = 'devices',\r\n    clientsActive = \"clientsActive\",\r\n    clientsHistory = \"clientsHistory\",\r\n    wlanConfig = 'wlanConfig',\r\n    lanConfig = 'lanConfig',\r\n    wanConfig = 'wanConfig',\r\n    models = 'models'\r\n}"],
  "mappings": "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",
  "names": ["response", "csrfToken", "ApiEndpoints", "ApiEndpoints_V2"]
}
