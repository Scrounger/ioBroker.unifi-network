{
  "version": 3,
  "sources": ["../../../src/lib/tree/wlan.ts"],
  "sourcesContent": ["import { myCommonState, myCommoneChannelObject, myCommonChannelArray, myCache, myNetworkClient } from \"../myTypes.js\";\r\nimport * as myHelper from '../helper.js';\r\nimport { NetworkWlanConfig } from \"../api/network-types-wlan-config.js\";\r\nimport { NetworkDevice } from \"../api/network-types-device.js\";\r\n\r\nexport namespace wlan {\r\n    let keys: string[] = undefined;\r\n\r\n    export const idChannel = 'wlan';\r\n\r\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            current_access_point_count: {\r\n                id: 'access_point_count',\r\n                iobType: 'number',\r\n                name: 'number of access points',\r\n            },\r\n            enabled: {\r\n                iobType: 'boolean',\r\n                name: 'WLAN enabled',\r\n                read: true,\r\n                write: true\r\n            },\r\n            is_guest: {\r\n                iobType: 'boolean',\r\n                name: 'is guest'\r\n            },\r\n            name: {\r\n                iobType: 'string',\r\n                name: 'name',\r\n                required: true\r\n            },\r\n            connected_clients: {\r\n                id: 'connected_clients',\r\n                iobType: 'number',\r\n                name: 'connected clients',\r\n                conditionToCreateState(objDevice: NetworkWlanConfig, adapter: ioBroker.Adapter): boolean {\r\n                    return !objDevice?.is_guest\r\n                },\r\n                valFromProperty: 'current_client_count',\r\n            },\r\n            peak_client_count: {\r\n                id: 'connected_clients_peak',\r\n                iobType: 'number',\r\n                name: 'peak of connected clients',\r\n                conditionToCreateState(objDevice: NetworkWlanConfig, adapter: ioBroker.Adapter): boolean {\r\n                    return !objDevice?.is_guest\r\n                },\r\n            },\r\n            connected_guests: {\r\n                id: 'connected_guests',\r\n                iobType: 'number',\r\n                name: 'connected guests',\r\n                conditionToCreateState(objDevice: NetworkWlanConfig, adapter: ioBroker.Adapter): boolean {\r\n                    return objDevice?.is_guest\r\n                },\r\n                valFromProperty: 'current_client_count',\r\n            },\r\n            current_satisfaction: {\r\n                id: 'satisfaction',\r\n                iobType: 'number',\r\n                name: 'satisfaction',\r\n                unit: '%',\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice | myNetworkClient, id: string): ioBroker.StateValue {\r\n                    return val >= 0 ? val : 0\r\n                },\r\n            },\r\n        }\r\n    }\r\n\r\n    export function getGlobal(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            connected_clients: {\r\n                id: 'connected_clients',\r\n                iobType: 'number',\r\n                name: 'connected clients',\r\n            },\r\n            connected_guests: {\r\n                id: 'connected_guests',\r\n                iobType: 'number',\r\n                name: 'connected guests',\r\n            },\r\n        }\r\n    }\r\n\r\n    export function getKeys(): string[] {\r\n        if (keys === undefined) {\r\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    export function getStateIDs(): string[] {\r\n        return myHelper.getAllIdsOfTreeDefinition(get());\r\n    }\r\n}\r\n"],
  "mappings": "AACA,YAAY,cAAc;AAInB,IAAU;AAAA,CAAV,CAAUA,UAAV;AACH,MAAI,OAAiB;AAEd,EAAMA,MAAA,YAAY;AAElB,WAAS,MAAwF;AACpG,WAAO;AAAA,MACH,4BAA4B;AAAA,QACxB,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,SAAS;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,UAAU;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,UAAU;AAAA,MACd;AAAA,MACA,mBAAmB;AAAA,QACf,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,QACN,uBAAuB,WAA8B,SAAoC;AACrF,iBAAO,EAAC,uCAAW;AAAA,QACvB;AAAA,QACA,iBAAiB;AAAA,MACrB;AAAA,MACA,mBAAmB;AAAA,QACf,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,QACN,uBAAuB,WAA8B,SAAoC;AACrF,iBAAO,EAAC,uCAAW;AAAA,QACvB;AAAA,MACJ;AAAA,MACA,kBAAkB;AAAA,QACd,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,QACN,uBAAuB,WAA8B,SAAoC;AACrF,iBAAO,uCAAW;AAAA,QACtB;AAAA,QACA,iBAAiB;AAAA,MACrB;AAAA,MACA,sBAAsB;AAAA,QAClB,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,OAAgB,gBAAiD,IAAiC;AAC9I,iBAAO,OAAO,IAAI,MAAM;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AA1DO,EAAAA,MAAS;AA4DT,WAAS,YAA8F;AAC1G,WAAO;AAAA,MACH,mBAAmB;AAAA,QACf,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,kBAAkB;AAAA,QACd,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAbO,EAAAA,MAAS;AAeT,WAAS,UAAoB;AAChC,QAAI,SAAS,QAAW;AACpB,aAAO,SAAS,2BAA2B,IAAI,CAAC;AAAA,IACpD;AAEA,WAAO;AAAA,EACX;AANO,EAAAA,MAAS;AAQT,WAAS,cAAwB;AACpC,WAAO,SAAS,0BAA0B,IAAI,CAAC;AAAA,EACnD;AAFO,EAAAA,MAAS;AAAA,GAxFH;",
  "names": ["wlan"]
}
