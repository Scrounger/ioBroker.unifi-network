{
  "version": 3,
  "sources": ["../../../src/lib/tree/lan.ts"],
  "sourcesContent": ["import { myCommonState, myCommoneChannelObject, myCommonChannelArray, myCache, myNetworkClient } from \"../myTypes.js\";\r\nimport * as myHelper from '../helper.js';\r\nimport { NetworkDevice } from \"../api/network-types-device.js\";\r\nimport { NetworkLanConfig } from \"../api/network-types-lan-config.js\";\r\n\r\nexport namespace lan {\r\n    let keys: string[] = undefined;\r\n\r\n    export const idChannel = 'lan';\r\n\r\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            connected_clients: {\r\n                id: 'connected_clients',\r\n                iobType: 'number',\r\n                name: 'connected clients',\r\n                conditionToCreateState(objDevice: NetworkLanConfig, adapter: ioBroker.Adapter): boolean {\r\n                    return objDevice?.purpose !== 'guest'\r\n                },\r\n                valFromProperty: 'dhcp_active_leases',\r\n            },\r\n            connected_guests: {\r\n                id: 'connected_guests',\r\n                iobType: 'number',\r\n                name: 'connected guests',\r\n                conditionToCreateState(objDevice: NetworkLanConfig, adapter: ioBroker.Adapter): boolean {\r\n                    return objDevice?.purpose === 'guest'\r\n                },\r\n                valFromProperty: 'dhcp_active_leases',\r\n            },\r\n            enabled: {\r\n                iobType: 'boolean',\r\n                name: 'WLAN enabled',\r\n                read: true,\r\n                write: true\r\n            },\r\n            ip_subnet: {\r\n                iobType: 'string',\r\n                name: 'IP subnet'\r\n            },\r\n            internet_access_enabled: {\r\n                id: 'internet_enabled',\r\n                iobType: 'boolean',\r\n                name: 'internet access enabled',\r\n                read: true,\r\n                write: true,\r\n                valFromProperty: 'internet_access_enabled'\r\n            },\r\n            name: {\r\n                iobType: 'string',\r\n                name: 'name',\r\n                required: true\r\n            },\r\n            purpose: {\r\n                id: 'type',\r\n                iobType: 'string',\r\n                name: 'type of network'\r\n            },\r\n            vlan: {\r\n                iobType: 'number',\r\n                name: 'VLAN Id',\r\n                readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice | myNetworkClient, id: string): ioBroker.StateValue {\r\n                    return parseInt(val);\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    export function getGlobal(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            connected_clients: {\r\n                id: 'connected_clients',\r\n                iobType: 'number',\r\n                name: 'connected clients',\r\n            },\r\n            connected_guests: {\r\n                id: 'connected_guests',\r\n                iobType: 'number',\r\n                name: 'connected guests',\r\n            },\r\n        }\r\n    }\r\n\r\n    export function getKeys(): string[] {\r\n        if (keys === undefined) {\r\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    export function getStateIDs(): string[] {\r\n        return myHelper.getAllIdsOfTreeDefinition(get());\r\n    }\r\n}"],
  "mappings": "AACA,YAAY,cAAc;AAInB,IAAU;AAAA,CAAV,CAAUA,SAAV;AACH,MAAI,OAAiB;AAEd,EAAMA,KAAA,YAAY;AAElB,WAAS,MAAwF;AACpG,WAAO;AAAA,MACH,mBAAmB;AAAA,QACf,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,QACN,uBAAuB,WAA6B,SAAoC;AACpF,kBAAO,uCAAW,aAAY;AAAA,QAClC;AAAA,QACA,iBAAiB;AAAA,MACrB;AAAA,MACA,kBAAkB;AAAA,QACd,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,QACN,uBAAuB,WAA6B,SAAoC;AACpF,kBAAO,uCAAW,aAAY;AAAA,QAClC;AAAA,QACA,iBAAiB;AAAA,MACrB;AAAA,MACA,SAAS;AAAA,QACL,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,WAAW;AAAA,QACP,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,yBAAyB;AAAA,QACrB,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,iBAAiB;AAAA,MACrB;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,UAAU;AAAA,MACd;AAAA,MACA,SAAS;AAAA,QACL,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,MAAM;AAAA,QACF,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ,KAAa,SAA2B,OAAgB,gBAAiD,IAAiC;AAC9I,iBAAO,SAAS,GAAG;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAxDO,EAAAA,KAAS;AA0DT,WAAS,YAA8F;AAC1G,WAAO;AAAA,MACH,mBAAmB;AAAA,QACf,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,MACA,kBAAkB;AAAA,QACd,IAAI;AAAA,QACJ,SAAS;AAAA,QACT,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAbO,EAAAA,KAAS;AAeT,WAAS,UAAoB;AAChC,QAAI,SAAS,QAAW;AACpB,aAAO,SAAS,2BAA2B,IAAI,CAAC;AAAA,IACpD;AAEA,WAAO;AAAA,EACX;AANO,EAAAA,KAAS;AAQT,WAAS,cAAwB;AACpC,WAAO,SAAS,0BAA0B,IAAI,CAAC;AAAA,EACnD;AAFO,EAAAA,KAAS;AAAA,GAtFH;",
  "names": ["lan"]
}
