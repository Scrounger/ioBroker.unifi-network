{
  "version": 3,
  "sources": ["../../../src/lib/tree/device.ts"],
  "sourcesContent": ["import _ from 'lodash';\r\nimport { NetworkDevice, NetworkDeviceStorage, NetworkDevicePortTable, NetworkDeviceRadioTableStat, NetworkDeviceTemperature, NetworkDeviceVapTable } from '../api/network-types-device.js';\r\nimport { myCache, myCommonChannelArray, myCommonState, myCommoneChannelObject } from '../myTypes.js';\r\nimport * as myHelper from '../helper.js';\r\n\r\n\r\nexport namespace device {\r\n    let keys: string[] = undefined;\r\n\r\n    export const idChannel = 'devices'\r\n\r\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            connected_clients: {\r\n                id: 'connected_clients',\r\n                iobType: 'number',\r\n                name: 'connected clients',\r\n                valFromProperty: 'user-num_sta',\r\n            },\r\n            connected_guests: {\r\n                id: 'connected_guests',\r\n                iobType: 'number',\r\n                name: 'connected guests',\r\n                valFromProperty: 'guest-num_sta',\r\n            },\r\n            disabled: {\r\n                id: 'disabled',\r\n                iobType: 'boolean',\r\n                name: 'access point is disabled',\r\n                conditionToCreateState(objDevice: NetworkDevice, adapter: ioBroker.Adapter): boolean {\r\n                    // only wireless clients\r\n                    return objDevice?.is_access_point;\r\n                },\r\n                read: false,\r\n                write: true,\r\n                role: 'button',\r\n                def: false,\r\n            },\r\n            fan_level: {\r\n                iobType: 'number',\r\n                name: 'fan level',\r\n                unit: '%'\r\n            },\r\n            hasError: {\r\n                id: 'hasError',\r\n                iobType: 'boolean',\r\n                name: 'device reported errors',\r\n                valFromProperty: 'state',\r\n                required: true,\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                    return val === 6 || val === 9\r\n                },\r\n            },\r\n            imageUrl: {\r\n                iobType: 'string',\r\n                name: 'imageUrl',\r\n                expert: true,\r\n                subscribeMe: true,\r\n                valFromProperty: 'model',\r\n                required: true,\r\n                readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                    if (val && adapter.config.deviceImageDownload) {\r\n                        const find = _.find(cache.deviceModels, (x) => x.model_name.includes(val));\r\n\r\n                        if (find) {\r\n                            return `https://images.svc.ui.com/?u=https://static.ui.com/fingerprint/ui/images/${find.id}/default/${find.default_image_id}.png&w=256?q=100`\r\n                        }\r\n                    }\r\n                    return null;\r\n                }\r\n            },\r\n            image: {\r\n                id: 'image',\r\n                iobType: 'string',\r\n                name: 'base64 image'\r\n            },\r\n            ip: {\r\n                iobType: 'string',\r\n                name: 'ip address',\r\n                required: true\r\n            },\r\n            isOnline: {\r\n                id: 'isOnline',\r\n                iobType: 'boolean',\r\n                name: 'is device online',\r\n                valFromProperty: 'state',\r\n                required: true,\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                    return val !== 0 && val !== 6 && val !== 9\r\n                },\r\n            },\r\n            led_override: {\r\n                iobType: 'string',\r\n                name: 'led override',\r\n                write: true,\r\n                states: {\r\n                    'on': 'on',\r\n                    'off': 'off',\r\n                    'default': 'default'\r\n                }\r\n            },\r\n            last_seen: {\r\n                iobType: 'number',\r\n                name: 'last seen',\r\n                required: true\r\n            },\r\n            mac: {\r\n                iobType: 'string',\r\n                name: 'mac address',\r\n                required: true\r\n            },\r\n            name: {\r\n                iobType: 'string',\r\n                name: 'device name'\r\n            },\r\n            restart: {\r\n                id: 'restart',\r\n                iobType: 'boolean',\r\n                name: 'restart device',\r\n                read: false,\r\n                write: true,\r\n                role: 'button'\r\n            },\r\n            rx_bytes: {\r\n                iobType: 'number',\r\n                name: 'RX Bytes',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                }\r\n            },\r\n            state: {\r\n                iobType: 'number',\r\n                name: 'device state',\r\n                states: {\r\n                    0: \"offline\",\r\n                    1: \"connected\",\r\n                    2: \"pending adoption\",\r\n                    4: \"updating\",\r\n                    5: \"provisioning\",\r\n                    6: \"unreachable\",\r\n                    7: \"adopting\",\r\n                    9: \"adoption error\",\r\n                    11: \"isolated\"\r\n                }\r\n            },\r\n            port_table: {\r\n                idChannel: 'ports',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'port table'\r\n                },\r\n                arrayChannelIdFromProperty(objDevice: NetworkDevicePortTable, i: number, adapter: ioBroker.Adapter): string {\r\n                    return `port_${myHelper.zeroPad(objDevice?.port_idx, 2)}`\r\n                },\r\n                arrayChannelNameFromProperty(objDevice: any, adapter: ioBroker.Adapter): string {\r\n                    return objDevice['name']\r\n                },\r\n                array: {\r\n                    name: {\r\n                        iobType: 'string',\r\n                        name: 'port name'\r\n                    },\r\n                    enable: {\r\n                        iobType: 'boolean',\r\n                        name: 'enabled'\r\n                    },\r\n                    is_uplink: {\r\n                        iobType: 'boolean',\r\n                        name: 'is uplink port'\r\n                    },\r\n                    poe_enable: {\r\n                        id: 'poe_enable',\r\n                        iobType: 'boolean',\r\n                        name: 'POE enabled',\r\n                        conditionToCreateState(objDevice: NetworkDevicePortTable, adapter: ioBroker.Adapter): boolean {\r\n                            // only create state if it's a poe port\r\n                            return objDevice?.port_poe === true;\r\n                        },\r\n                        valFromProperty: 'poe_mode',\r\n                        read: true,\r\n                        write: true,\r\n                        readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return val === 'auto';\r\n                        }\r\n                    },\r\n                    poe_cycle: {\r\n                        id: 'poe_cycle',\r\n                        iobType: 'boolean',\r\n                        name: 'temporary interruption of the power supply to the poe port of the switch',\r\n                        read: false,\r\n                        write: true,\r\n                        role: 'button',\r\n                        conditionToCreateState(objDevice: NetworkDevicePortTable, adapter: ioBroker.Adapter): boolean {\r\n                            // only create state if it's a poe port\r\n                            return objDevice?.port_poe === true;\r\n                        },\r\n                    },\r\n                    poe_power: {\r\n                        iobType: 'number',\r\n                        name: 'POE power consumption',\r\n                        unit: 'W',\r\n                        conditionToCreateState(objDevice: NetworkDevicePortTable, adapter: ioBroker.Adapter): boolean {\r\n                            // only create state if it's a poe port\r\n                            return objDevice?.port_poe === true;\r\n                        },\r\n                        readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return parseFloat(val);\r\n                        }\r\n                    },\r\n                    poe_voltage: {\r\n                        iobType: 'number',\r\n                        name: 'POE voltage',\r\n                        unit: 'V',\r\n                        conditionToCreateState(objDevice: NetworkDevicePortTable, adapter: ioBroker.Adapter): boolean {\r\n                            // only create state if it's a poe port\r\n                            return objDevice?.port_poe === true;\r\n                        },\r\n                        readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return parseFloat(val);\r\n                        }\r\n                    },\r\n                    port_idx: {\r\n                        iobType: 'number',\r\n                        name: 'Port number'\r\n                    },\r\n                    rx_bytes: {\r\n                        iobType: 'number',\r\n                        name: 'RX Bytes',\r\n                        unit: 'GB',\r\n                        readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                        }\r\n                    },\r\n                    satisfaction: {\r\n                        iobType: 'number',\r\n                        name: 'satisfaction',\r\n                        conditionToCreateState(objDevice: NetworkDevicePortTable, adapter: ioBroker.Adapter): boolean {\r\n                            // only create state if it's a poe port\r\n                            return objDevice?.satisfaction >= 0 ? true : false;\r\n                        },\r\n                        unit: '%'\r\n                    },\r\n                    speed: {\r\n                        iobType: 'number',\r\n                        name: 'speed',\r\n                        unit: 'mbps'\r\n                    },\r\n                    tx_bytes: {\r\n                        iobType: 'number',\r\n                        name: 'TX Bytes',\r\n                        unit: 'GB',\r\n                        readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            radio_table: {\r\n                idChannel: 'radio',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'WLAN Radio'\r\n                },\r\n                arrayChannelNameFromProperty(objDevice: any, adapter: ioBroker.Adapter): string {\r\n                    return myHelper.radio_nameToFrequency(objDevice['name'], adapter);\r\n                },\r\n                array: {\r\n                    channel: {\r\n                        iobType: 'number',\r\n                        name: 'channel'\r\n                    },\r\n                    channel_name: {\r\n                        id: 'channel_frequency',\r\n                        iobType: 'string',\r\n                        name: 'channel name',\r\n                        valFromProperty: 'name',\r\n                        readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return myHelper.radio_nameToFrequency(val, adapter);\r\n                        }\r\n                    },\r\n                    channel_width: {\r\n                        id: 'channel_width',\r\n                        iobType: 'number',\r\n                        name: 'channel width / frequency',\r\n                        valFromProperty: 'ht',\r\n                        unit: 'MHz'\r\n                    },\r\n                    tx_power_mode: {\r\n                        iobType: 'string',\r\n                        name: 'transmit power'\r\n                    },\r\n                    // tx_power_max: {\r\n                    //     id: 'tx_power_max',\r\n                    //     iobType: 'number',\r\n                    //     name: 'max. TX Power ',\r\n                    //     valFromProperty: 'max_txpower',\r\n                    //     unit: 'dBm'\r\n                    // },\r\n                    // tx_power_min: {\r\n                    //     id: 'tx_power_min',\r\n                    //     iobType: 'number',\r\n                    //     name: 'min. TX Power ',\r\n                    //     valFromProperty: 'min_txpower',\r\n                    //     unit: 'dBm'\r\n                    // }\r\n                }\r\n            },\r\n            radio_table_stats: {\r\n                idChannel: 'radio',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'WLAN Radio'\r\n                },\r\n                arrayChannelNameFromProperty(objDevice: NetworkDeviceRadioTableStat, adapter: ioBroker.Adapter): string {\r\n                    return myHelper.radio_nameToFrequency(objDevice?.name, adapter);\r\n                },\r\n                array: {\r\n                    channel_utilization: {\r\n                        iobType: 'number',\r\n                        name: 'Channel Utilization',\r\n                        unit: '%',\r\n                        valFromProperty: 'cu_total'\r\n                    },\r\n                    channel_utilization_rx: {\r\n                        iobType: 'number',\r\n                        name: 'Channel Utilization RX',\r\n                        unit: '%',\r\n                        valFromProperty: 'cu_self_rx'\r\n                    },\r\n                    channel_utilization_tx: {\r\n                        iobType: 'number',\r\n                        name: 'Channel Utilization TX',\r\n                        unit: '%',\r\n                        valFromProperty: 'cu_self_tx'\r\n                    },\r\n                    connected_clients: {\r\n                        id: 'connected_clients',\r\n                        iobType: 'number',\r\n                        name: 'connected clients',\r\n                        valFromProperty: 'user-num_sta',\r\n                    },\r\n                    connected_guests: {\r\n                        id: 'connected_guests',\r\n                        iobType: 'number',\r\n                        name: 'connected guests',\r\n                        valFromProperty: 'guest-num_sta',\r\n                    },\r\n                    satisfaction: {\r\n                        iobType: 'number',\r\n                        name: 'satisfaction',\r\n                        conditionToCreateState(objDevice: NetworkDeviceRadioTableStat, adapter: ioBroker.Adapter): boolean {\r\n                            // only create state if it's a poe port\r\n                            return objDevice?.satisfaction >= 0 ? true : false;\r\n                        },\r\n                        unit: '%'\r\n                    },\r\n                    tx_packets: {\r\n                        iobType: 'number',\r\n                        name: 'TX Packets',\r\n                    },\r\n                    tx_power: {\r\n                        iobType: 'number',\r\n                        name: 'TX Power',\r\n                        unit: 'dBm'\r\n                    },\r\n                    tx_retries: {\r\n                        iobType: 'number',\r\n                        name: 'TX Retries',\r\n                    },\r\n                }\r\n            },\r\n            satisfaction: {\r\n                iobType: 'number',\r\n                name: 'satisfaction',\r\n                conditionToCreateState(objDevice: NetworkDevice, adapter: ioBroker.Adapter): boolean {\r\n                    // only create state if it's a poe port\r\n                    return objDevice?.satisfaction >= 0 ? true : false;\r\n                },\r\n                unit: '%'\r\n            },\r\n            storage: {\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'storage'\r\n                },\r\n                arrayChannelNameFromProperty(objDevice: NetworkDeviceStorage, adapter: ioBroker.Adapter) {\r\n                    return objDevice?.name\r\n                },\r\n                array: {\r\n                    'mount_point': {\r\n                        iobType: 'string',\r\n                        name: 'mount point'\r\n                    },\r\n                    name: {\r\n                        iobType: 'string',\r\n                        name: 'name'\r\n                    },\r\n                    size: {\r\n                        iobType: 'number',\r\n                        name: 'size',\r\n                        unit: 'GB',\r\n                        readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                        }\r\n                    },\r\n                    type: {\r\n                        iobType: 'string',\r\n                        name: 'type'\r\n                    },\r\n                    used: {\r\n                        iobType: 'number',\r\n                        name: 'used',\r\n                        unit: 'GB',\r\n                        readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"system-stats\": {\r\n                idChannel: 'system',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'system statistics'\r\n                },\r\n                object: {\r\n                    cpu: {\r\n                        iobType: 'number',\r\n                        unit: '%',\r\n                        readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return parseFloat(val);\r\n                        },\r\n\r\n                    },\r\n                    mem: {\r\n                        iobType: 'number',\r\n                        unit: '%',\r\n                        readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return parseFloat(val);\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n            temperatures: {\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'temperature'\r\n                },\r\n                arrayChannelIdFromProperty(objDevice: NetworkDeviceTemperature, i: number, adapter: ioBroker.Adapter): string {\r\n                    return objDevice?.name\r\n                },\r\n                arrayChannelNameFromProperty(objDevice: NetworkDeviceTemperature, adapter: ioBroker.Adapter): string {\r\n                    return objDevice?.name\r\n                },\r\n                array: {\r\n                    type: {\r\n                        iobType: 'string',\r\n                        name: 'type'\r\n                    },\r\n                    value: {\r\n                        iobType: 'number',\r\n                        name: 'value',\r\n                        unit: '\u00B0C',\r\n                        readVal: function (val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice): ioBroker.StateValue {\r\n                            return Math.round(val * 10) / 10;\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            temperature: {\r\n                id: 'temperature',\r\n                iobType: 'number',\r\n                name: 'temperature',\r\n                unit: '\u00B0C',\r\n                valFromProperty: 'general_temperature',\r\n                readVal: function (val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                    return Math.round(val * 10) / 10;\r\n                },\r\n            },\r\n            tx_bytes: {\r\n                iobType: 'number',\r\n                name: 'TX Bytes',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                }\r\n            },\r\n            power: {\r\n                id: 'power',\r\n                iobType: 'number',\r\n                name: 'total power consumption',\r\n                unit: 'W',\r\n                valFromProperty: 'total_used_power'\r\n            },\r\n            upgradable: {\r\n                iobType: 'boolean',\r\n                name: 'new firmware available'\r\n            },\r\n            upgrade: {\r\n                id: 'upgrade',\r\n                iobType: 'boolean',\r\n                name: 'upgrade device to new firmware',\r\n                read: false,\r\n                write: true,\r\n                role: 'button'\r\n            },\r\n            uplink: {\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'uplink device'\r\n                },\r\n                object: {\r\n                    // Ip is same as from device, it's not the ip of the uplink device\r\n                    // ip: {\r\n                    //     iobType: 'string',\r\n                    //     name: 'uplink device ip address'\r\n                    // },\r\n                    name: {\r\n                        id: 'name',\r\n                        iobType: 'string',\r\n                        name: 'uplink device name',\r\n                        valFromProperty: 'uplink_device_name'\r\n                    },\r\n                    mac: {\r\n                        id: 'mac',\r\n                        iobType: 'string',\r\n                        name: 'uplink device MAC address',\r\n                        valFromProperty: 'uplink_mac'\r\n                    },\r\n                    port_id: {\r\n                        id: 'port_id',\r\n                        iobType: 'number',\r\n                        name: 'uplink device port number',\r\n                        valFromProperty: 'uplink_remote_port'\r\n                    },\r\n                    speed: {\r\n                        iobType: 'number',\r\n                        name: 'uplink speed to device',\r\n                        unit: 'mbps'\r\n                    },\r\n                    type: {\r\n                        iobType: 'string',\r\n                        name: 'uplink type to device'\r\n                    }\r\n                }\r\n            },\r\n            uptime: {\r\n                iobType: 'number',\r\n                name: 'uptime',\r\n                unit: 's',\r\n                required: true\r\n            },\r\n            vap_table: {\r\n                idChannel: 'wlan',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'WLAN Network Statistics'\r\n                },\r\n                arrayChannelIdFromProperty(objDevice: NetworkDeviceVapTable, i: number, adapter: ioBroker.Adapter): string | undefined {\r\n                    if (objDevice?.id) {\r\n                        return `${objDevice?.id}_${objDevice?.radio_name.replace('wifi', '').replace('ra0', '0').replace('rai0', '1')}`\r\n                    } else {\r\n                        return undefined\r\n                    }\r\n                },\r\n                arrayChannelNameFromProperty(objDevice: NetworkDeviceVapTable, adapter: ioBroker.Adapter): string {\r\n                    return `${objDevice?.essid} - ${myHelper.radio_nameToFrequency(objDevice?.radio_name, adapter)}`\r\n                },\r\n                array: {\r\n                    avg_client_signal: {\r\n                        iobType: 'number',\r\n                        name: 'average client signal',\r\n                        unit: 'dBm'\r\n                    },\r\n                    channel: {\r\n                        iobType: 'number',\r\n                        name: 'channel'\r\n                    },\r\n                    channel_name: {\r\n                        id: 'channel_frequency',\r\n                        iobType: 'string',\r\n                        name: 'channel frequency',\r\n                        valFromProperty: 'radio_name',\r\n                        readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return myHelper.radio_nameToFrequency(val, adapter);\r\n                        }\r\n                    },\r\n                    connected_clients: {\r\n                        id: 'connected_clients',\r\n                        iobType: 'number',\r\n                        name: 'connected clients',\r\n                        conditionToCreateState(objDevice: NetworkDeviceVapTable, adapter: ioBroker.Adapter): boolean {\r\n                            return !objDevice?.is_guest\r\n                        },\r\n                        valFromProperty: 'num_sta',\r\n                    },\r\n                    connected_guests: {\r\n                        id: 'connected_guests',\r\n                        iobType: 'number',\r\n                        name: 'connected guests',\r\n                        conditionToCreateState(objDevice: NetworkDeviceVapTable, adapter: ioBroker.Adapter): boolean {\r\n                            return objDevice?.is_guest\r\n                        },\r\n                        valFromProperty: 'num_sta',\r\n                    },\r\n                    essid: {\r\n                        iobType: 'string',\r\n                        name: 'WLAN SSID'\r\n                    },\r\n                    id: {\r\n                        iobType: 'string',\r\n                        name: 'WLAN internal id',\r\n                        expert: true,\r\n                        required: true,\r\n                    },\r\n                    is_guest: {\r\n                        iobType: 'boolean',\r\n                        name: 'is guest wlan'\r\n                    },\r\n                    rx_bytes: {\r\n                        iobType: 'number',\r\n                        name: 'RX Bytes',\r\n                        unit: 'GB',\r\n                        readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                        }\r\n                    },\r\n                    satisfaction: {\r\n                        iobType: 'number',\r\n                        name: 'satisfaction',\r\n                        unit: '%',\r\n                        readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return val >= 0 ? val : 0\r\n                        },\r\n                    },\r\n                    tx_bytes: {\r\n                        iobType: 'number',\r\n                        name: 'TX Bytes',\r\n                        unit: 'GB',\r\n                        readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                            return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                        }\r\n                    },\r\n                }\r\n            },\r\n            active_geo_info: {\r\n                idChannel: 'isp',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'internet service provider'\r\n                },\r\n                object: {\r\n                    WAN: {\r\n                        idChannel: 'wan1',\r\n                        channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                            return objChannel.isp_name\r\n                        },\r\n                        object: _ISP_GEO_INFO_PROPERTIES\r\n                    },\r\n                    WAN2: {\r\n                        idChannel: 'wan2',\r\n                        channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                            return objChannel.isp_name\r\n                        },\r\n                        object: _ISP_GEO_INFO_PROPERTIES\r\n                    },\r\n                }\r\n            },\r\n            uptime_stats: {\r\n                idChannel: 'isp',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'internet service provider'\r\n                },\r\n                object: {\r\n                    WAN: {\r\n                        idChannel: 'wan1',\r\n                        channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                            return objDevice.active_geo_info.WAN.isp_name\r\n                        },\r\n                        object: _ISP_UPTIME_PROPERTIES\r\n                    },\r\n                    WAN2: {\r\n                        idChannel: 'wan2',\r\n                        channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                            return objDevice.active_geo_info.WAN2.isp_name\r\n                        },\r\n                        object: _ISP_UPTIME_PROPERTIES\r\n                    }\r\n                }\r\n            },\r\n            wan1: {\r\n                idChannel: 'wan1',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'WAN 1'\r\n                },\r\n                object: _WAN_PROPERTIES\r\n            },\r\n            wan2: {\r\n                idChannel: 'wan2',\r\n                channelName(objDevice: NetworkDevice, objChannel: any, adapter: ioBroker.Adapter): string {\r\n                    return 'WAN 1'\r\n                },\r\n                object: _WAN_PROPERTIES\r\n            }\r\n        }\r\n    }\r\n\r\n    export function getKeys(): string[] {\r\n        if (keys === undefined) {\r\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    export function getStateIDs(): string[] {\r\n        return myHelper.getAllIdsOfTreeDefinition(get());\r\n    }\r\n\r\n\r\n    const _WAN_PROPERTIES: { [key: string]: myCommonState } = {\r\n        current_download: {\r\n            iobType: 'number',\r\n            name: 'current download rate',\r\n            unit: 'Mbps',\r\n            valFromProperty: 'rx_rate',\r\n            readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                return Math.round(val / 1000 / 1000 * 1000) / 1000;\r\n            }\r\n        },\r\n        current_upload: {\r\n            iobType: 'number',\r\n            name: 'current upload rate',\r\n            unit: 'Mbps',\r\n            valFromProperty: 'tx_rate',\r\n            readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                return Math.round(val / 1000 / 1000 * 1000) / 1000;\r\n            }\r\n        },\r\n        ip: {\r\n            iobType: 'string',\r\n            name: 'ip address',\r\n        },\r\n        latency: {\r\n            iobType: 'number',\r\n            name: 'latency',\r\n            unit: 'ms'\r\n        },\r\n        name: {\r\n            iobType: 'string'\r\n        },\r\n        port_idx: {\r\n            iobType: 'number',\r\n            name: 'Port'\r\n        },\r\n        rx_bytes: {\r\n            iobType: 'number',\r\n            name: 'RX Bytes',\r\n            unit: 'GB',\r\n            readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n            }\r\n        },\r\n        tx_bytes: {\r\n            iobType: 'number',\r\n            name: 'TX Bytes',\r\n            unit: 'GB',\r\n            readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n            }\r\n        },\r\n        speedtest_download: {\r\n            id: 'speedtest_download',\r\n            iobType: 'number',\r\n            name: 'speed test download rate',\r\n            unit: 'Mbps'\r\n        },\r\n        speedtest_upload: {\r\n            id: 'speedtest_upload',\r\n            iobType: 'number',\r\n            name: 'speed test upload rate',\r\n            unit: 'Mbps'\r\n        },\r\n        speedtest_run: {\r\n            id: 'speedtest_run',\r\n            iobType: 'boolean',\r\n            name: 'run speedtest',\r\n            read: false,\r\n            write: true,\r\n            role: 'button'\r\n        },\r\n        up: {\r\n            iobType: 'boolean',\r\n        }\r\n    }\r\n\r\n    const _ISP_UPTIME_PROPERTIES: { [key: string]: myCommonState } = {\r\n        availability: {\r\n            iobType: 'number',\r\n            name: 'availability',\r\n            unit: '%',\r\n            readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): ioBroker.StateValue {\r\n                return Math.round(val);\r\n            }\r\n        },\r\n        downtime: {\r\n            id: 'downtime',\r\n            iobType: 'number',\r\n            name: 'uptime',\r\n            unit: 's',\r\n            def: 0,\r\n            async readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): Promise<ioBroker.StateValue> {\r\n                // if downtime increase, isp connection is down\r\n                const isOnlineId = `${myHelper.getIdWithoutLastPart(id)}.${_ISP_UPTIME_PROPERTIES.isOnline.id}`;\r\n                if (await adapter.objectExists(isOnlineId)) {\r\n                    await adapter.setStateChangedAsync(isOnlineId, false, true);\r\n                }\r\n\r\n                return val;\r\n            }\r\n        },\r\n        isOnline: {\r\n            id: 'isOnline',\r\n            iobType: 'boolean',\r\n            name: 'is connected to internet service provider'\r\n        },\r\n        uptime: {\r\n            id: 'uptime',\r\n            iobType: 'number',\r\n            name: 'uptime',\r\n            unit: 's',\r\n            def: 0,\r\n            async readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: NetworkDevice, id: string): Promise<ioBroker.StateValue> {\r\n                // if uptime increase, isp connection is up\r\n                const isOnlineId = `${myHelper.getIdWithoutLastPart(id)}.${_ISP_UPTIME_PROPERTIES.isOnline.id}`;\r\n                if (await adapter.objectExists(isOnlineId)) {\r\n                    await adapter.setStateChangedAsync(isOnlineId, true, true);\r\n                }\r\n\r\n                return val;\r\n            }\r\n        },\r\n    }\r\n\r\n    const _ISP_GEO_INFO_PROPERTIES: { [key: string]: myCommonState } = {\r\n        address: {\r\n            id: 'ip',\r\n            iobType: 'string',\r\n            name: 'internet ip address',\r\n        },\r\n        city: {\r\n            iobType: 'string',\r\n            name: 'city',\r\n        },\r\n        country_name: {\r\n            id: 'country',\r\n            iobType: 'string',\r\n            name: 'country',\r\n        },\r\n        isp_name: {\r\n            id: 'name',\r\n            iobType: 'string',\r\n            name: 'provider name'\r\n        },\r\n        isp_organization: {\r\n            id: 'organization',\r\n            iobType: 'string',\r\n            name: 'provider organization'\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["device"]
}
