{
  "version": 3,
  "sources": ["../../../src/lib/tree/client.ts"],
  "sourcesContent": ["import moment from 'moment';\r\nimport { myCache, myCommonChannelArray, myCommonState, myCommoneChannelObject, myNetworkClient } from '../myTypes.js';\r\nimport { NetworkClientFingerprint } from '../api/network-types-client.js';\r\nimport * as myHelper from '../helper.js';\r\n\r\n\r\nexport namespace client {\r\n    let keys: string[] = undefined;\r\n\r\n    export const idChannel = 'clients';\r\n\r\n    export const idChannelUsers = `${idChannel}.users`;\r\n    export const idChannelGuests = `${idChannel}.guests`;\r\n    export const idChannelVpn = `${idChannel}.vpn`;\r\n\r\n    export function get(): { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } {\r\n        return {\r\n            // authorized: {                                --> just kicks the client, use case ???\r\n            //     iobType: 'boolean',\r\n            //     name: 'client is authorized',\r\n            //     read: true,\r\n            //     write: true,\r\n            //     conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n            //         // only wired and wireless clients\r\n            //         return objDevice.is_guest;\r\n            //     },\r\n            // },\r\n            blocked: {\r\n                iobType: 'boolean',\r\n                name: 'client is blocked',\r\n                read: true,\r\n                write: true,\r\n            },\r\n            channel: {\r\n                iobType: 'number',\r\n                name: 'channel'\r\n            },\r\n            channel_name: {\r\n                id: 'channel_frequency',\r\n                iobType: 'string',\r\n                name: 'channel name',\r\n                valFromProperty: 'radio_name',\r\n                readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    return myHelper.radio_nameToFrequency(val, adapter);\r\n                }\r\n            },\r\n            essid: {\r\n                iobType: 'string',\r\n                name: 'WLAN SSID'\r\n            },\r\n            first_seen: {\r\n                iobType: 'number',\r\n                name: 'first seen'\r\n            },\r\n            hostname: {\r\n                iobType: 'string',\r\n                name: 'hostname'\r\n            },\r\n            imageUrl: {\r\n                iobType: 'string',\r\n                name: 'imageUrl',\r\n                expert: true,\r\n                subscribeMe: true,\r\n                valFromProperty: 'fingerprint',\r\n                required: true,\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired and wireless clients\r\n                    return objDevice?.type === undefined || objDevice?.type !== \"VPN\";\r\n                },\r\n                readVal(val: NetworkClientFingerprint, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    if (deviceOrClient.fingerprint && adapter.config.clientImageDownload) {\r\n                        if (deviceOrClient.unifi_device_info && deviceOrClient.unifi_device_info.icon_filename) {\r\n                            return `https://static.ui.com/fingerprint/ui/icons/${deviceOrClient.unifi_device_info.icon_filename}_257x257.png?q=100`\r\n                        } else if (Object.prototype.hasOwnProperty.call(deviceOrClient.fingerprint, 'computed_engine')) {\r\n                            if (Object.prototype.hasOwnProperty.call(deviceOrClient.fingerprint, 'dev_id_override')) {\r\n                                return `https://static.ui.com/fingerprint/${deviceOrClient.fingerprint.computed_engine}/${deviceOrClient.fingerprint.dev_id_override}_257x257.png?q=100`\r\n                            } else if (Object.prototype.hasOwnProperty.call(deviceOrClient.fingerprint, 'dev_id')) {\r\n                                return `https://static.ui.com/fingerprint/${deviceOrClient.fingerprint.computed_engine}/${deviceOrClient.fingerprint.dev_id}_257x257.png?q=100`\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                }\r\n            },\r\n            image: {\r\n                id: 'image',\r\n                iobType: 'string',\r\n                name: 'base64 image',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired and wireless clients\r\n                    return objDevice?.type === undefined || objDevice?.type !== \"VPN\";\r\n                }\r\n            },\r\n            // is_guest: {\r\n            //     iobType: 'boolean',\r\n            //     name: 'is guest'\r\n            // },\r\n            is_wired: {\r\n                iobType: 'boolean',\r\n                name: 'is wired'\r\n            },\r\n            ip: {\r\n                iobType: 'string',\r\n                name: 'ip address',\r\n                required: true\r\n            },\r\n            isOnline: {\r\n                id: 'isOnline',\r\n                iobType: 'boolean',\r\n                name: 'Is client online',\r\n                valFromProperty: 'last_seen',\r\n                subscribeMe: true,\r\n                required: true,\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    const diff = moment().diff(val * 1000, 'seconds');\r\n                    if (deviceOrClient.type !== 'VPN') {\r\n                        return diff <= adapter.config.clientOfflineTimeout;\r\n                    } else {\r\n                        return diff <= adapter.config.vpnOfflineTimeout;\r\n                    }\r\n                }\r\n            },\r\n            last_seen: {\r\n                iobType: 'number',\r\n                name: 'last seen',\r\n                required: true\r\n            },\r\n            last_uplink_mac: {\r\n                id: 'uplink_mac',\r\n                iobType: 'string',\r\n                name: 'mac address of the connected access point or switch',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired and wireless clients\r\n                    return objDevice?.type === undefined || objDevice?.type !== \"VPN\";\r\n                }\r\n            },\r\n            last_uplink_name: {\r\n                id: 'uplink_name',\r\n                iobType: 'string',\r\n                name: 'name of the connected access point or switch',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired and wireless clients\r\n                    return objDevice?.type === undefined || objDevice?.type !== \"VPN\";\r\n                }\r\n            },\r\n            sw_port: {\r\n                id: 'uplink_port',\r\n                iobType: 'number',\r\n                name: 'port of the connected switch',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired clients\r\n                    return (objDevice?.is_wired && objDevice?.type === undefined) || objDevice?.type === \"WIRED\";\r\n                }\r\n            },\r\n            mac: {\r\n                iobType: 'string',\r\n                name: 'mac address',\r\n                required: true\r\n            },\r\n            model_name: {\r\n                id: 'model',\r\n                iobType: 'string',\r\n                name: 'model name',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired and wireless clients\r\n                    return objDevice?.type === undefined || objDevice?.type !== \"VPN\";\r\n                },\r\n            },\r\n            name: {\r\n                iobType: 'string',\r\n                name: 'device name',\r\n                read: true,\r\n                write: true\r\n            },\r\n            network_id: {\r\n                iobType: 'string',\r\n                name: 'network id'\r\n            },\r\n            network_name: {\r\n                iobType: 'string',\r\n                name: 'network name'\r\n            },\r\n            radio: {\r\n                iobType: 'string',\r\n                name: 'radio',\r\n                valFromProperty: 'radio_proto'\r\n            },\r\n            radio_name: {\r\n                id: 'radio_name',\r\n                iobType: 'string',\r\n                name: 'radio name',\r\n                valFromProperty: 'radio_proto',\r\n                readVal(val: string, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    if (val) {\r\n                        if (val === 'ax') return 'WiFi 6'\r\n                        if (val === 'ac') return 'WiFi 5'\r\n                        if (val === 'ng') return 'WiFi 4'\r\n                        if (val === 'n') return 'WiFi 4'\r\n                        if (val === 'g') return 'WiFi 3'\r\n                        if (val === 'b') return 'WiFi 2'\r\n                        if (val === 'a') return 'WiFi 1'\r\n                    }\r\n\r\n                    return 'tbd'\r\n                }\r\n            },\r\n            reconnect: {\r\n                id: 'reconnect',\r\n                iobType: 'boolean',\r\n                name: 'reconnect client',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wireless clients\r\n                    return (!objDevice?.is_wired && objDevice?.type === undefined) || objDevice?.type === 'WIRELESS';\r\n                },\r\n                read: false,\r\n                write: true,\r\n                role: 'button'\r\n            },\r\n            remote_ip: {\r\n                iobType: 'string',\r\n                name: 'remote ip',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wireless clients\r\n                    return objDevice?.type === 'VPN';\r\n                },\r\n            },\r\n            // remove: {\r\n            //     id: 'remove',\r\n            //     iobType: 'boolean',\r\n            //     name: 'remove client from controller',\r\n            //     read: false,\r\n            //     write: true,\r\n            //     role: 'button'\r\n            // },\r\n            rx_bytes: {\r\n                iobType: 'number',\r\n                name: 'RX Bytes',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                }\r\n            },\r\n            rx_rate: {\r\n                iobType: 'number',\r\n                name: 'Rx Rate',\r\n                unit: 'mbps',\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1000);\r\n                }\r\n            },\r\n            signal: {\r\n                iobType: 'number',\r\n                name: 'signal',\r\n                unit: 'dBm'\r\n            },\r\n            tx_bytes: {\r\n                iobType: 'number',\r\n                name: 'TX Bytes',\r\n                unit: 'GB',\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1000 / 1000 / 1000 * 1000) / 1000;\r\n                }\r\n            },\r\n            tx_rate: {\r\n                iobType: 'number',\r\n                name: 'Tx Rate',\r\n                unit: 'mbps',\r\n                readVal(val: number, adapter: ioBroker.Adapter, cache: myCache, deviceOrClient: myNetworkClient, id: string): ioBroker.StateValue {\r\n                    return Math.round(val / 1000);\r\n                }\r\n            },\r\n            type: {\r\n                iobType: 'string',\r\n                name: 'client type',\r\n                states: {\r\n                    \"WIRED\": 'LAN',\r\n                    \"WIRELESS\": 'WLAN',\r\n                    \"VPN\": 'VPN'\r\n                }\r\n            },\r\n            uptime: {\r\n                iobType: 'number',\r\n                name: 'uptime',\r\n                unit: 's',\r\n                required: true,\r\n            },\r\n            vlan: {\r\n                id: 'network_vlan',\r\n                iobType: 'number',\r\n                name: 'VLAN number',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired and wireless clients\r\n                    return objDevice?.type === undefined || objDevice?.type !== \"VPN\";\r\n                },\r\n            },\r\n            wired_rate_mbps: {\r\n                id: 'speed',\r\n                iobType: 'number',\r\n                name: 'wired speed',\r\n                unit: 'mbps',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wired clients\r\n                    return (objDevice?.is_wired && objDevice?.type === undefined) || objDevice?.type === \"WIRED\";\r\n                },\r\n            },\r\n            wifi_experience_average: {\r\n                id: 'wlan_experience',\r\n                iobType: 'number',\r\n                name: 'experience',\r\n                unit: '%',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wireless clients\r\n                    return (!objDevice?.is_wired && objDevice?.type === undefined) || objDevice?.type === 'WIRELESS'\r\n                },\r\n            },\r\n            wifi_tx_retries_percentage: {\r\n                id: 'wlan_tx_retries',\r\n                iobType: 'number',\r\n                name: 'TX Retries',\r\n                unit: '%',\r\n                conditionToCreateState(objDevice: myNetworkClient, adapter: ioBroker.Adapter): boolean {\r\n                    // only wireless clients\r\n                    return (!objDevice?.is_wired && objDevice?.type === undefined) || objDevice?.type === 'WIRELESS';\r\n                },\r\n            },\r\n        }\r\n    }\r\n\r\n    export function getKeys(): string[] {\r\n        if (keys === undefined) {\r\n            keys = myHelper.getAllKeysOfTreeDefinition(get());\r\n            // manual add keys here:\r\n            keys.push(...['fingerprint.computed_engine', 'fingerprint.dev_id_override', 'fingerprint.dev_id', 'fingerprint.has_override']);\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    export function getStateIDs(): string[] {\r\n        return myHelper.getAllIdsOfTreeDefinition(get());\r\n    }\r\n}"],
  "mappings": "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",
  "names": ["client"]
}
