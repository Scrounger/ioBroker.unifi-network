{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.5\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport moment from 'moment';\r\nimport { ALPNProtocol, FetchError, context } from '@adobe/fetch';\r\nimport _ from 'lodash';\r\nimport url from 'node:url';\r\n\r\n// API imports\r\nimport { NetworkApi } from './lib/api/network-api.js';\r\nimport { apiCommands } from './lib/api/network-command.js';\r\nimport { NetworkEvent, NetworkEventClient, NetworkEventDevice, NetworkEventFirewallGroup, NetworkEventLanConfig, NetworkEventSpeedTest, NetworkEventWlanConfig } from './lib/api/network-types.js';\r\nimport { NetworkDevice } from './lib/api/network-types-device.js';\r\nimport { NetworkDeviceModels } from './lib/api/network-types-device-models.js';\r\nimport { NetworkWlanConfig, NetworkWlanConfig_V2 } from './lib/api/network-types-wlan-config.js';\r\nimport { NetworkLanConfig, NetworkLanConfig_V2 } from './lib/api/network-types-lan-config.js';\r\nimport { FirewallGroup } from './lib/api/network-types-firewall-group.js';\r\n\r\n// Adapter imports\r\nimport * as myHelper from './lib/helper.js';\r\nimport { ConnectedClients, WebSocketEvent, WebSocketEventMessages, myCache, myCommonChannelArray, myCommonState, myCommoneChannelObject, myImgCache, myNetworkClient } from './lib/myTypes.js';\r\nimport { eventHandler } from './lib/eventHandler.js';\r\nimport * as tree from './lib/tree/index.js'\r\nimport { base64 } from './lib/base64.js';\r\nimport { messageHandler } from './lib/messageHandler.js';\r\nimport * as myI18n from './lib/i18n.js';\r\n\r\n\r\nclass UnifiNetwork extends utils.Adapter {\r\n\tufn: NetworkApi = undefined;\r\n\tisConnected: boolean = false;\r\n\r\n\taliveTimeout: ioBroker.Timeout | undefined = undefined;\r\n\tpingTimeout: ioBroker.Timeout | undefined = undefined;\r\n\taliveTimestamp: number = moment().valueOf();\r\n\r\n\timageUpdateTimeout: ioBroker.Timeout\r\n\r\n\tconnectionRetries: number = 0;\r\n\r\n\tcache: myCache = {\r\n\t\tdevices: {},\r\n\t\tdeviceModels: [],\r\n\t\tclients: {},\r\n\t\tvpn: {},\r\n\t\twlan: {},\r\n\t\tlan: {},\r\n\t\tisOnline: {},\r\n\t\tfirewallGroup: {}\r\n\t}\r\n\r\n\tsubscribedList: string[] = [];\r\n\r\n\teventListener = (event: NetworkEvent) => this.onNetworkMessage(event);\r\n\tpongListener = () => this.onPongMessage();\r\n\r\n\tfetch = context(\r\n\t\t{\r\n\t\t\talpnProtocols: [ALPNProtocol.ALPN_HTTP2],\r\n\t\t\trejectUnauthorized: false,\r\n\t\t\tuserAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36',\r\n\t\t}\r\n\t).fetch;\r\n\r\n\teventsToIgnore = [\r\n\t\t'device:update',\r\n\t\t'unifi-device:sync',\r\n\t\t'session-metadata:sync'\r\n\t]\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'unifi-network',\r\n\t\t\tuseFormatDate: true\r\n\t\t});\r\n\t\tthis.on('ready', this.onReady.bind(this));\r\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\r\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\r\n\t\tthis.on('message', this.onMessage.bind(this));\r\n\t\tthis.on('unload', this.onUnload.bind(this));\r\n\t}\r\n\r\n\t//#region adapter methods\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tconst logPrefix = '[onReady]:';\r\n\r\n\t\ttry {\r\n\t\t\tmoment.locale(this.language);\r\n\r\n\t\t\t// ohne worte....\r\n\t\t\tawait myI18n.init(`${utils.getAbsoluteDefaultDataDir().replace('iobroker-data/', '')}node_modules/iobroker.${this.name}/admin`, this);\r\n\r\n\t\t\tif (this.config.host, this.config.user, this.config.password) {\r\n\t\t\t\tthis.ufn = new NetworkApi(this.config.host, this.config.port, this.config.isUnifiOs, this.config.site, this.config.user, this.config.password, this.log);\r\n\r\n\t\t\t\tawait this.establishConnection();\r\n\r\n\t\t\t\tthis.ufn.on('message', this.eventListener);\r\n\t\t\t\tthis.ufn.on('pong', this.pongListener);\r\n\t\t\t\tthis.log.info(`${logPrefix} WebSocket listener to realtime API successfully started`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.warn(`${logPrefix} no login credentials in adapter config set!`);\r\n\t\t\t}\r\n\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\tconst logPrefix = '[onUnload]:';\r\n\r\n\t\ttry {\r\n\t\t\tthis.removeListener('message', this.eventListener);\r\n\t\t\tthis.removeListener('pong', this.pongListener);\r\n\r\n\t\t\tthis.clearTimeout(this.aliveTimeout);\r\n\t\t\tthis.clearTimeout(this.pingTimeout);\r\n\r\n\t\t\tthis.clearTimeout(this.imageUpdateTimeout);\r\n\r\n\t\t\tif (this.ufn) {\r\n\t\t\t\tthis.ufn.logout();\r\n\t\t\t\tthis.setConnectionStatus(false);\r\n\t\t\t\tthis.log.info(`${logPrefix} Logged out successfully from the Unifi-Network controller API. (host: ${this.config.host}:${this.config.port})`);\r\n\t\t\t}\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n\t\tconst logPrefix = '[onStateChange]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (state) {\r\n\t\t\t\tif (state.from.includes(this.namespace)) {\r\n\t\t\t\t\t// internal changes\r\n\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'imageUrl') {\r\n\t\t\t\t\t\tif (this.config.clientImageDownload && (id.startsWith(`${this.namespace}.${tree.client.idChannelUsers}.`) || id.startsWith(`${this.namespace}.${tree.client.idChannelGuests}.`))) {\r\n\t\t\t\t\t\t\tawait this.downloadImage(state.val as string, [myHelper.getIdWithoutLastPart(id)]);\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} state '${id}' changed -> update client image`);\r\n\t\t\t\t\t\t} else if (this.config.deviceImageDownload && id.startsWith(`${this.namespace}.${tree.device.idChannel}.`)) {\r\n\t\t\t\t\t\t\tawait this.downloadImage(state.val as string, [myHelper.getIdWithoutLastPart(id)]);\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} state '${id}' changed -> update device image`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'isOnline' && (id.startsWith(`${this.namespace}.${tree.client.idChannelUsers}.`) || id.startsWith(`${this.namespace}.${tree.client.idChannelGuests}.`) || id.startsWith(`${this.namespace}.${tree.client.idChannelVpn}.`))) {\r\n\t\t\t\t\t\tconst macOrIp = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id)).replaceAll('_', '.');\r\n\r\n\t\t\t\t\t\tif (state.val !== this.cache.isOnline[macOrIp].val) {\r\n\t\t\t\t\t\t\tconst old = {\r\n\t\t\t\t\t\t\t\twlan_id: this.cache.isOnline[macOrIp].wlan_id,\r\n\t\t\t\t\t\t\t\tnetwork_id: this.cache.isOnline[macOrIp].network_id,\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.cache.isOnline[macOrIp] = {\r\n\t\t\t\t\t\t\t\tval: state.val as boolean,\r\n\t\t\t\t\t\t\t\twlan_id: this.cache.clients[macOrIp]?.wlanconf_id || this.cache.vpn[macOrIp]?.wlanconf_id || old.wlan_id,\r\n\t\t\t\t\t\t\t\tnetwork_id: this.cache.clients[macOrIp]?.network_id || this.cache.vpn[macOrIp]?.network_id || old.network_id,\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} '${this.cache.clients[macOrIp]?.name || this.cache.vpn[macOrIp]?.ip}' .isOnline changed to '${state.val}' (${JSON.stringify(this.cache.isOnline[macOrIp])})`);\r\n\r\n\t\t\t\t\t\t\tawait this.updateWlanConnectedClients();\r\n\t\t\t\t\t\t\tawait this.updateLanConnectedClients();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (!state.from.includes(this.namespace) && state.ack === false) {\r\n\t\t\t\t\t// state changed from outside of the adapter\r\n\t\t\t\t\tconst mac = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id));\r\n\r\n\t\t\t\t\tif (id.startsWith(`${this.namespace}.${tree.client.idChannelUsers}.`) || id.startsWith(`${this.namespace}.${tree.client.idChannelGuests}.`)) {\r\n\t\t\t\t\t\t// Client state changed\r\n\t\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'blocked') {\r\n\t\t\t\t\t\t\tif (state.val) {\r\n\t\t\t\t\t\t\t\tconst res = await apiCommands.clients.block(this.ufn, mac);\r\n\t\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: block - '${this.cache.clients[mac].name}' (mac: ${mac})`);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconst res = await apiCommands.clients.unblock(this.ufn, mac);\r\n\t\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: unblock - '${this.cache.clients[mac].name}' (mac: ${mac})`);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'reconnect') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.clients.reconncet(this.ufn, mac);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: reconnect - '${this.cache.clients[mac].name}' (mac: ${mac})`);\r\n\t\t\t\t\t\t\t// } else if (myHelper.getIdLastPart(id) === 'authorized') {\r\n\t\t\t\t\t\t\t// \tlet res = undefined;\r\n\r\n\t\t\t\t\t\t\t// \tif (state.val === true) {\r\n\t\t\t\t\t\t\t// \t\tres = await apiCommands.clients.authorizeGuest(this.ufn, mac);\r\n\t\t\t\t\t\t\t// \t} else {\r\n\t\t\t\t\t\t\t// \t\tres = await apiCommands.clients.unauthorizeGuest(this.ufn, mac);\r\n\t\t\t\t\t\t\t// \t}\r\n\r\n\t\t\t\t\t\t\t// \tif (res) this.log.info(`${logPrefix} command sent: ${state.val ? 'authorize' : 'unauthorize'} guest - '${this.cache.clients[mac].name}' (mac: ${mac})`);\r\n\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'name') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.clients.setName(this.ufn, this.cache.clients[mac].user_id, state.val as string);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: set name - '${this.cache.clients[mac].name}' (mac: ${mac}, new name: ${state.val})`);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} client state ${id} changed: ${state.val} (ack = ${state.ack}) -> not implemented`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (id.startsWith(`${this.namespace}.${tree.device.idChannel}.`)) {\r\n\t\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'restart') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.devices.restart(this.ufn, mac);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: restart - '${this.cache.devices[mac].name}' (mac: ${mac})`);\r\n\r\n\t\t\t\t\t\t} else if (id.includes('.port_')) {\r\n\t\t\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'poe_cycle') {\r\n\t\t\t\t\t\t\t\tconst mac = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(myHelper.getIdWithoutLastPart(myHelper.getIdWithoutLastPart(id))));\r\n\t\t\t\t\t\t\t\tconst port_idx: number = parseInt(myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id)).replace('port_', ''));\r\n\r\n\t\t\t\t\t\t\t\tconst res = await apiCommands.devices.port_cyclePoePower(this.ufn, mac, port_idx, this.cache.devices[mac]);\r\n\r\n\t\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: cycle poe power - '${this.cache.devices[mac].name}' (mac: ${mac}) - Port ${port_idx}`);\r\n\t\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'poe_enable') {\r\n\t\t\t\t\t\t\t\tconst mac = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(myHelper.getIdWithoutLastPart(myHelper.getIdWithoutLastPart(id))));\r\n\t\t\t\t\t\t\t\tconst port_idx: number = parseInt(myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id)).replace('port_', ''));\r\n\r\n\t\t\t\t\t\t\t\tconst res = await apiCommands.devices.port_switchPoe(state.val as boolean, port_idx, this.ufn, this.cache.devices[mac]);\r\n\r\n\t\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: switch poe power - '${state.val ? 'on' : 'off'}' '${this.cache.devices[mac].name}' (mac: ${mac}) - Port ${port_idx}`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'led_override') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.devices.ledOverride(state.val as string, this.ufn, this.cache.devices[mac]);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: LED override to '${state.val}' - '${this.cache.devices[mac].name}' (mac: ${mac}) - `);\r\n\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'upgrade') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.devices.upgrade(this.ufn, this.cache.devices[mac]);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: upgrade to new firmware version - '${this.cache.devices[mac].name}' (mac: ${mac})`);\r\n\r\n\t\t\t\t\t\t} else if (id.includes('wan')) {\r\n\t\t\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'speedtest_run') {\r\n\t\t\t\t\t\t\t\tconst wan_interface = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id));\r\n\t\t\t\t\t\t\t\tconst mac = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(myHelper.getIdWithoutLastPart(id)));\r\n\t\t\t\t\t\t\t\tconst interface_name = this.cache.devices[mac][wan_interface].ifname;\r\n\r\n\t\t\t\t\t\t\t\tconst res = await apiCommands.devices.runSpeedtest(this.ufn, interface_name);\r\n\r\n\t\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: run speedtest (mac: ${mac}, wan: ${wan_interface}, interface: ${interface_name})`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'disabled') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.devices.disableAccessPoint(this.ufn, this.cache.devices[mac]._id, state.val as boolean);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: ${state.val ? 'disable' : 'enable'} access point '${this.cache.devices[mac].name}' (mac: ${mac})`);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} device state ${id} changed: ${state.val} (ack = ${state.ack}) -> not implemented`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (id.startsWith(`${this.namespace}.${tree.wlan.idChannel}.`)) {\r\n\t\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'enabled') {\r\n\t\t\t\t\t\t\tconst wlan_id = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id));\r\n\r\n\t\t\t\t\t\t\tconst res = await apiCommands.wlanConf.enable(this.ufn, wlan_id, state.val as boolean);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: wlan ${state.val ? 'enabled' : 'disabled'} - '${this.cache.wlan[wlan_id].name}' (id: ${wlan_id})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (id.startsWith(`${this.namespace}.${tree.lan.idChannel}.`)) {\r\n\t\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'enabled') {\r\n\t\t\t\t\t\t\tconst lan_id = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id));\r\n\r\n\t\t\t\t\t\t\tconst res = await apiCommands.lanConf.enable(this.ufn, lan_id, state.val as boolean);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: lan ${state.val ? 'enabled' : 'disabled'} - '${this.cache.lan[lan_id].name}' (id: ${lan_id})`);\r\n\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'internet_enabled') {\r\n\t\t\t\t\t\t\tconst lan_id = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id));\r\n\r\n\t\t\t\t\t\t\tconst res = await apiCommands.lanConf.internet_access_enabled(this.ufn, lan_id, state.val as boolean);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: internet access of lan ${state.val ? 'enabled' : 'disabled'} - '${this.cache.lan[lan_id].name}' (id: ${lan_id})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (id.startsWith(`${this.namespace}.${tree.firewallGroup.idChannel}.`)) {\r\n\t\t\t\t\t\tconst groupId = myHelper.getIdLastPart(myHelper.getIdWithoutLastPart(id));\r\n\r\n\t\t\t\t\t\tif (myHelper.getIdLastPart(id) === 'name') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.firewallGroup.setName(this.ufn, groupId, state.val as string);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: firewall group '${this.cache.firewallGroup[groupId].name}' - 'name' set to '${state.val}' (id: ${groupId})`);\r\n\t\t\t\t\t\t} else if (myHelper.getIdLastPart(id) === 'group_members') {\r\n\t\t\t\t\t\t\tconst res = await apiCommands.firewallGroup.setGroupMembers(this.ufn, groupId, state.val as string);\r\n\r\n\t\t\t\t\t\t\tif (res) this.log.info(`${logPrefix} command sent: firewall group '${this.cache.firewallGroup[groupId].name}' - 'members' set to '${state.val}' (id: ${groupId})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// The state was changed\r\n\t\t\t\t\t// this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// The state was deleted\r\n\t\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n\t// /**\r\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n\t//  */\r\n\tprivate async onMessage(obj: ioBroker.Message): Promise<void> {\r\n\t\tconst logPrefix = '[onMessage]:';\r\n\r\n\t\ttry {\r\n\t\t\t// this.log.info(`${logPrefix} ${JSON.stringify(obj)}`);\r\n\r\n\t\t\tif (typeof obj === 'object') {\r\n\t\t\t\tif (obj.command === 'deviceList') {\r\n\t\t\t\t\tmessageHandler.device.list(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'deviceStateList') {\r\n\t\t\t\t\tmessageHandler.device.stateList(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'clientList') {\r\n\t\t\t\t\tmessageHandler.client.list(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'clientStateList') {\r\n\t\t\t\t\tmessageHandler.client.stateList(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'wlanList') {\r\n\t\t\t\t\tmessageHandler.wlan.list(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'wlanStateList') {\r\n\t\t\t\t\tmessageHandler.wlan.stateList(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'lanList') {\r\n\t\t\t\t\tmessageHandler.lan.list(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'lanStateList') {\r\n\t\t\t\t\tmessageHandler.lan.stateList(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'firewallGroupList') {\r\n\t\t\t\t\tmessageHandler.firewallGroup.list(obj, this, this.ufn);\r\n\t\t\t\t} else if (obj.command === 'firewallGroupStateList') {\r\n\t\t\t\t\tmessageHandler.firewallGroup.stateList(obj, this, this.ufn);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region Establish Connection\r\n\r\n\t/**\r\n\t * Establish Connection to NVR and starting the alive checker\r\n\t * @param isAdapterStart \r\n\t */\r\n\tasync establishConnection() {\r\n\t\tconst logPrefix = '[establishConnection]:';\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif (this.pingTimeout) {\r\n\t\t\t\tthis.clearTimeout(this.pingTimeout)\r\n\t\t\t\tthis.pingTimeout = null;\r\n\t\t\t}\r\n\r\n\t\t\tif (await this.login()) {\r\n\t\t\t\tawait this.updateRealTimeApiData();\r\n\t\t\t\tawait this.updateIsOnlineState(true);\r\n\r\n\t\t\t\tawait this.updateApiData();\r\n\r\n\t\t\t\tthis.pingTimeout = this.setTimeout(() => {\r\n\t\t\t\t\tthis.sendPing();\r\n\t\t\t\t}, ((this.config.expertAliveInterval || 30) / 2) * 1000);\r\n\t\t\t} else {\r\n\t\t\t\tawait this.setConnectionStatus(false);\r\n\t\t\t}\r\n\r\n\t\t\t// start the alive checker\r\n\t\t\tif (this.aliveTimeout) {\r\n\t\t\t\tthis.clearTimeout(this.aliveTimeout);\r\n\t\t\t\tthis.aliveTimeout = null;\r\n\t\t\t}\r\n\r\n\t\t\tthis.aliveTimeout = this.setTimeout(() => {\r\n\t\t\t\tthis.aliveChecker();\r\n\t\t\t}, (this.config.expertAliveInterval || 30) * 1000);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Login into NVR and load bootstrap data\r\n\t * @returns {Promise<boolean>} Connection status\r\n\t */\r\n\tasync login(): Promise<boolean> {\r\n\t\tconst logPrefix = '[login]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.ufn) {\r\n\t\t\t\tconst loginSuccessful = await this.ufn.login();\r\n\r\n\t\t\t\tif (loginSuccessful) {\r\n\t\t\t\t\tthis.log.info(`${logPrefix} Logged in successfully to the Unifi-Network controller (host: ${this.config.host}:${this.config.port}, site: ${this.config.site}, isUnifiOs: ${this.config.isUnifiOs})`);\r\n\r\n\t\t\t\t\tif (await this.ufn.launchEventsWs()) {\r\n\t\t\t\t\t\tthis.log.info(`${logPrefix} WebSocket connection to realtime API successfully established`);\r\n\r\n\t\t\t\t\t\tawait this.setConnectionStatus(true);\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.log.error(`${logPrefix} unable to start ws listener`);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} Login to the Unifi-Network controller API failed! (host: ${this.config.host}${this.config.isUnifiOs ? '' : `:${this.config.port}`}, site: ${this.config.site})`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\r\n\t\tawait this.setConnectionStatus(false);\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t/** Check whether the connection to the controller exists, if not try to establish a new connection\r\n\t */\r\n\tasync aliveChecker() {\r\n\t\tconst logPrefix = '[aliveChecker]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.ufn) {\r\n\t\t\t\tconst diff = Math.round((moment().valueOf() - this.aliveTimestamp) / 1000);\r\n\r\n\t\t\t\tif (diff >= (this.config.expertAliveInterval || 30)) {\r\n\t\t\t\t\tthis.log.warn(`${logPrefix} No connection to the Unifi-Network controller -> restart connection (retries: ${this.connectionRetries}, no data since ${diff}s)`);\r\n\t\t\t\t\tthis.ufn.logout();\r\n\r\n\t\t\t\t\tawait this.setConnectionStatus(false);\r\n\r\n\t\t\t\t\tif (this.connectionRetries < (this.config.expertConnectionMaxRetries || 200)) {\r\n\t\t\t\t\t\tthis.connectionRetries++;\r\n\r\n\t\t\t\t\t\tawait this.establishConnection();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.log.error(`${logPrefix} Connection to the Unifi-Network controller is down for more then ${(this.config.expertConnectionMaxRetries || 200) * (this.config.expertAliveInterval || 30)}s, stopping the adapter.`);\r\n\t\t\t\t\t\tthis.stop({ reason: 'too many connection retries' });\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.silly(`${logPrefix} Connection to the Unifi-Network controller is alive (last alive signal is ${diff}s old)`);\r\n\r\n\t\t\t\t\tthis.updateIsOnlineState();\r\n\r\n\t\t\t\t\tawait this.setConnectionStatus(true);\r\n\t\t\t\t\tthis.connectionRetries = 0;\r\n\r\n\t\t\t\t\tif (this.aliveTimeout) {\r\n\t\t\t\t\t\tthis.clearTimeout(this.aliveTimeout);\r\n\t\t\t\t\t\tthis.aliveTimeout = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.aliveTimeout = this.setTimeout(() => {\r\n\t\t\t\t\t\tthis.aliveChecker();\r\n\t\t\t\t\t}, (this.config.expertAliveInterval || 30) * 1000);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/** Set adapter info.connection state and internal var\r\n\t * @param {boolean} isConnected\r\n\t */\r\n\tasync setConnectionStatus(isConnected: boolean) {\r\n\t\tconst logPrefix = '[setConnectionStatus]:';\r\n\r\n\t\ttry {\r\n\t\t\tthis.isConnected = isConnected;\r\n\t\t\tawait this.setState('info.connection', isConnected, true);\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * send websocket ping\r\n\t */\r\n\tasync sendPing(): Promise<void> {\r\n\t\tconst logPrefix = '[sendPing]:';\r\n\r\n\t\ttry {\r\n\t\t\tthis.ufn.wsSendPing();\r\n\r\n\t\t\tif (this.pingTimeout) {\r\n\t\t\t\tthis.clearTimeout(this.pingTimeout)\r\n\t\t\t\tthis.pingTimeout = null;\r\n\t\t\t}\r\n\r\n\t\t\tthis.pingTimeout = this.setTimeout(() => {\r\n\t\t\t\tthis.sendPing();\r\n\t\t\t}, ((this.config.expertAliveInterval || 30) / 2) * 1000);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region updateData\r\n\r\n\tasync updateRealTimeApiData() {\r\n\t\tconst logPrefix = '[updateRealTimeApiData]:';\r\n\r\n\t\ttry {\r\n\t\t\tthis.cache.deviceModels = await this.ufn.getDeviceModels_V2() as NetworkDeviceModels[];\r\n\r\n\t\t\tawait this.updateDevices((await this.ufn.getDevices_V2())?.network_devices, true);\r\n\r\n\t\t\tawait this.updateClients(null, true);\r\n\t\t\tawait this.updateClients(await this.ufn.getClientsHistory_V2() as myNetworkClient[], true, true);\r\n\t\t\t// await this.updatClientsOffline(await this.ufn.getClients(), true);\r\n\r\n\t\t\tawait this.updateLanConfig(null, true);\r\n\t\t\tawait this.updateLanConnectedClients(true);\r\n\r\n\t\t\tawait this.updateWlanConfig(null, true);\r\n\t\t\tawait this.updateWlanConnectedClients(true);\r\n\r\n\t\t\tawait this.updateFirewallGroup(null, true);\r\n\r\n\r\n\t\t\t// const tmp = tree.lan.getStateIDs();\r\n\t\t\t// let list = []\r\n\r\n\t\t\t// for (let id of tmp) {\r\n\t\t\t// \tlist.push({ id: id });\r\n\t\t\t// }\r\n\r\n\t\t\t// this.log.warn(JSON.stringify(list));\r\n\r\n\t\t\tthis.imageUpdateTimeout = this.setTimeout(() => { this.updateImages(); }, this.config.realTimeApiDebounceTime * 2 * 1000);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateApiData() {\r\n\t\tconst logPrefix = '[updateApiData]:';\r\n\r\n\t\ttry {\r\n\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateDevices(data: NetworkDevice[] | null = null, isAdapterStart: boolean = false) {\r\n\t\tconst logPrefix = '[updateDevices]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.connected && this.isConnected) {\r\n\t\t\t\tif (this.config.devicesEnabled) {\r\n\r\n\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\tawait this.createOrUpdateChannel(tree.device.idChannel, 'unifi devices', undefined, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (data && data !== null) {\r\n\t\t\t\t\t\tlet countDevices = 0;\r\n\t\t\t\t\t\tlet countBlacklisted = 0;\r\n\r\n\t\t\t\t\t\tfor (let device of data) {\r\n\t\t\t\t\t\t\tconst idDevice = `${tree.device.idChannel}.${device.mac}`;\r\n\r\n\t\t\t\t\t\t\tif ((!this.config.deviceIsWhiteList && !_.some(this.config.deviceBlackList, { mac: device.mac })) || (this.config.deviceIsWhiteList && _.some(this.config.deviceBlackList, { mac: device.mac }))) {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\tcountDevices++\r\n\r\n\t\t\t\t\t\t\t\t\tif (device.vap_table) {\r\n\t\t\t\t\t\t\t\t\t\t// API V2 has no id for wlan, so we remove this and wait for real-time data\r\n\t\t\t\t\t\t\t\t\t\tdelete device.vap_table;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!isAdapterStart && this.config.realTimeApiDebounceTime > 0 && this.cache.devices[device.mac]) {\r\n\t\t\t\t\t\t\t\t\t// debounce real time data\r\n\t\t\t\t\t\t\t\t\tconst lastSeen = this.cache.devices[device.mac].last_seen;\r\n\t\t\t\t\t\t\t\t\tconst iobTimestamp = this.cache.devices[device.mac].iobTimestamp;\r\n\t\t\t\t\t\t\t\t\tif ((lastSeen && moment().diff(lastSeen * 1000, 'seconds') < this.config.realTimeApiDebounceTime) || (iobTimestamp && moment().diff(iobTimestamp * 1000, 'seconds') < this.config.realTimeApiDebounceTime)) {\r\n\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!this.cache.devices[device.mac]) {\r\n\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} Discovered device '${device.name}' (IP: ${device.ip}, mac: ${device.mac}, state: ${device.state}, model: ${device.model || device.shortname})`);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataToProcess = device;\r\n\t\t\t\t\t\t\t\tif (this.cache.devices[device.mac]) {\r\n\t\t\t\t\t\t\t\t\t// filter out unchanged properties\r\n\t\t\t\t\t\t\t\t\tdataToProcess = myHelper.deepDiffBetweenObjects(device, this.cache.devices[device.mac], this, tree.device.getKeys()) as NetworkDevice;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!_.isEmpty(dataToProcess)) {\r\n\t\t\t\t\t\t\t\t\tthis.cache.devices[device.mac] = device;\r\n\t\t\t\t\t\t\t\t\tthis.cache.devices[device.mac].iobTimestamp = moment().unix();\r\n\r\n\t\t\t\t\t\t\t\t\tdataToProcess.mac = device.mac;\r\n\r\n\t\t\t\t\t\t\t\t\tif (!isAdapterStart) this.log.silly(`${logPrefix} device '${device.name}' (mac: ${dataToProcess.mac}) follwing properties will be updated: ${JSON.stringify(dataToProcess)}`);\r\n\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(idDevice, device.name, `${this.namespace}.${idDevice}.isOnline`, `${this.namespace}.${idDevice}.hasError`, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(idDevice, tree.device.get(), dataToProcess, this.config.deviceStatesBlackList, this.config.deviceStatesIsWhiteList, device, device, isAdapterStart);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\tcountBlacklisted++\r\n\r\n\t\t\t\t\t\t\t\t\tif (await this.objectExists(idDevice)) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idDevice, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} device '${device.name}' (mac: ${device.mac}) delete, ${this.config.deviceIsWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\tthis.log.info(`${logPrefix} Discovered ${data.length} devices (devices: ${countDevices}, blacklisted: ${countBlacklisted})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (await this.objectExists(tree.device.idChannel)) {\r\n\t\t\t\t\t\tawait this.delObjectAsync(tree.device.idChannel, { recursive: true });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} '${tree.device.idChannel}' deleted`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateClients(data: myNetworkClient[] | null = null, isAdapterStart: boolean = false, isOfflineClients: boolean = false) {\r\n\t\tconst logPrefix = '[updateClients]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.connected && this.isConnected) {\r\n\t\t\t\tconst idChannel = tree.client.idChannelUsers;\r\n\t\t\t\tconst idGuestChannel = tree.client.idChannelGuests;\r\n\t\t\t\tconst idVpnChannel = tree.client.idChannelVpn;\r\n\r\n\t\t\t\tif (isAdapterStart && !isOfflineClients) {\r\n\t\t\t\t\tif (this.config.clientsEnabled) await this.createOrUpdateChannel(idChannel, 'users', undefined, true);\r\n\t\t\t\t\tif (this.config.guestsEnabled) await this.createOrUpdateChannel(idGuestChannel, 'guests', undefined, true);\r\n\t\t\t\t\tif (this.config.vpnEnabled) await this.createOrUpdateChannel(idVpnChannel, 'vpn users', undefined, true);\r\n\r\n\t\t\t\t\tif (this.config.clientsEnabled || this.config.guestsEnabled || this.config.vpnEnabled) {\r\n\t\t\t\t\t\tawait this.createOrUpdateChannel(tree.client.idChannel, 'client devices', undefined, true);\r\n\t\t\t\t\t\tdata = await this.ufn.getClientsActive_V2() as myNetworkClient[];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (await this.objectExists(tree.client.idChannel)) {\r\n\t\t\t\t\t\t\tawait this.delObjectAsync(tree.client.idChannel, { recursive: true });\r\n\t\t\t\t\t\t\tthis.log.info(`${logPrefix} channel clients delete`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.config.clientsEnabled || this.config.guestsEnabled || this.config.vpnEnabled) {\r\n\t\t\t\t\tif (data && data !== null) {\r\n\t\t\t\t\t\tlet countClients = 0;\r\n\t\t\t\t\t\tlet countGuests = 0;\r\n\t\t\t\t\t\tlet countVpn = 0;\r\n\t\t\t\t\t\tlet countBlacklisted = 0;\r\n\r\n\t\t\t\t\t\tfor (let client of data) {\r\n\t\t\t\t\t\t\tconst name = client.unifi_device_info_from_ucore?.name || client.display_name || client.name || client.hostname;\r\n\r\n\t\t\t\t\t\t\tif ((!this.config.clientIsWhiteList && !_.some(this.config.clientBlackList, { mac: client.mac })) || (this.config.clientIsWhiteList && _.some(this.config.clientBlackList, { mac: client.mac }))) {\r\n\t\t\t\t\t\t\t\tif (!isAdapterStart && this.config.realTimeApiDebounceTime > 0 && (this.cache.clients[client.mac] || this.cache.clients[client.ip])) {\r\n\t\t\t\t\t\t\t\t\t// debounce real time data\r\n\t\t\t\t\t\t\t\t\tconst lastSeen = this.cache.clients[client.mac].last_seen || this.cache.clients[client.ip].last_seen;\r\n\t\t\t\t\t\t\t\t\tconst iobTimestamp = this.cache.clients[client.mac].timestamp || this.cache.clients[client.ip].timestamp;\r\n\r\n\t\t\t\t\t\t\t\t\tif ((lastSeen && moment().diff(lastSeen * 1000, 'seconds') < this.config.realTimeApiDebounceTime) || (iobTimestamp && moment().diff(iobTimestamp * 1000, 'seconds') < this.config.realTimeApiDebounceTime)) {\r\n\t\t\t\t\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tconst offlineSince = moment().diff((client.last_seen) * 1000, 'days');\r\n\r\n\t\t\t\t\t\t\t\tif (this.config.clientsEnabled && client.mac && !client.is_guest) {\r\n\t\t\t\t\t\t\t\t\t// Clients\r\n\t\t\t\t\t\t\t\t\tif (this.config.deleteClientsOlderThan === 0 || offlineSince <= this.config.deleteClientsOlderThan) {\r\n\t\t\t\t\t\t\t\t\t\tif (isAdapterStart) countClients++\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (!this.cache.clients[client.mac]) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} Discovered ${isOfflineClients ? 'disconnected' : 'connected'} client '${name}' (${!isOfflineClients ? `IP: ${client.ip}, ` : ''}mac: ${client.mac})`);\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.mac] = { val: !isOfflineClients }\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tlet dataToProcess = client;\r\n\t\t\t\t\t\t\t\t\t\tif (this.cache.clients[client.mac]) {\r\n\t\t\t\t\t\t\t\t\t\t\t// filter out unchanged properties\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess = myHelper.deepDiffBetweenObjects(client, this.cache.clients[client.mac], this, tree.client.getKeys()) as myNetworkClient;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (Object.keys(dataToProcess).length > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.clients[client.mac] = client;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.clients[client.mac].name = name;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.clients[client.mac].timestamp = moment().unix();\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.mac].wlan_id = client.wlanconf_id;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.mac].network_id = client.network_id;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess.mac = client.mac;\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess.name = name\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (!isAdapterStart) this.log.silly(`${logPrefix} client ${dataToProcess.name} (mac: ${dataToProcess.mac}) follwing properties will be updated: ${JSON.stringify(dataToProcess)}`);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(`${idChannel}.${client.mac}`, name, `${this.namespace}.${idChannel}.${client.mac}.isOnline`, undefined, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idChannel}.${client.mac}`, tree.client.get(), dataToProcess, this.config.clientStatesBlackList, this.config.clientStatesIsWhiteList, client, client, isAdapterStart);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (await this.objectExists(`${idChannel}.${client.mac}`)) {\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(`${idChannel}.${client.mac}`, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} client '${name}' deleted, because it's offline since ${offlineSince} days`);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} client '${name}' ingored, because it's offline since ${offlineSince} days`);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else if (this.config.guestsEnabled && client.mac && client.is_guest) {\r\n\t\t\t\t\t\t\t\t\t// Guests\r\n\t\t\t\t\t\t\t\t\tif (this.config.deleteGuestsOlderThan === 0 || offlineSince <= this.config.deleteGuestsOlderThan) {\r\n\t\t\t\t\t\t\t\t\t\tif (isAdapterStart) countGuests++\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (!this.cache.clients[client.mac]) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} Discovered ${isOfflineClients ? 'disconnected' : 'connected'} guest '${name}' (${!isOfflineClients ? `IP: ${client.ip}, ` : ''}mac: ${client.mac})`);\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.mac] = { val: !isOfflineClients }\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tlet dataToProcess = client;\r\n\t\t\t\t\t\t\t\t\t\tif (this.cache.clients[client.mac]) {\r\n\t\t\t\t\t\t\t\t\t\t\t// filter out unchanged properties\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess = myHelper.deepDiffBetweenObjects(client, this.cache.clients[client.mac], this, tree.client.getKeys()) as myNetworkClient;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (Object.keys(dataToProcess).length > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.clients[client.mac] = client;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.clients[client.mac].name = name;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.clients[client.mac].timestamp = moment().unix();\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.mac].wlan_id = client.wlanconf_id;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.mac].network_id = client.network_id;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess.mac = client.mac;\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess.name = name\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (!isAdapterStart) this.log.silly(`${logPrefix} guest ${dataToProcess.name} (mac: ${dataToProcess.mac}) follwing properties will be updated: ${JSON.stringify(dataToProcess)}`);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(`${idGuestChannel}.${client.mac}`, name, `${this.namespace}.${idGuestChannel}.${client.mac}.isOnline`, undefined, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idGuestChannel}.${client.mac}`, tree.client.get(), dataToProcess, this.config.clientStatesBlackList, this.config.clientStatesIsWhiteList, client, client, isAdapterStart);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (await this.objectExists(`${idGuestChannel}.${client.mac}`)) {\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(`${idGuestChannel}.${client.mac}`, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} guest '${name}' deleted, because it's offline since ${offlineSince} days`);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} guest '${name}' ingored, because it's offline since ${offlineSince} days`);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif (this.config.vpnEnabled && client.type === 'VPN' && client.ip) {\r\n\t\t\t\t\t\t\t\t\t\t// VPN Clients\r\n\t\t\t\t\t\t\t\t\t\tif (isAdapterStart) countVpn++\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (!this.cache.vpn[client.ip]) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} Discovered vpn client '${name}' (IP: ${client.ip}, remote_ip: ${client.remote_ip})`);\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.ip] = { val: !isOfflineClients }\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst idChannel = client.network_id;\r\n\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${idVpnChannel}.${idChannel}`, client.network_name || '', base64[client.vpn_type] || undefined);\r\n\r\n\t\t\t\t\t\t\t\t\t\tlet dataToProcess = client;\r\n\t\t\t\t\t\t\t\t\t\tif (this.cache.vpn[client.ip]) {\r\n\t\t\t\t\t\t\t\t\t\t\t// filter out unchanged properties\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess = myHelper.deepDiffBetweenObjects(client, this.cache.vpn[client.ip], this, tree.client.getKeys()) as myNetworkClient;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst preparedIp = client.ip.replaceAll('.', '_');\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (Object.keys(dataToProcess).length > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.vpn[client.ip] = client;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.vpn[client.ip].name = name;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.vpn[client.ip].timestamp = moment().unix();\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.ip].wlan_id = client.wlanconf_id;\r\n\t\t\t\t\t\t\t\t\t\t\tthis.cache.isOnline[client.ip].network_id = client.network_id;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess.ip = client.ip;\r\n\t\t\t\t\t\t\t\t\t\t\tdataToProcess.name = name\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (!isAdapterStart) this.log.silly(`${logPrefix} vpn ${dataToProcess.name} (ip: ${dataToProcess.ip}) follwing properties will be updated: ${JSON.stringify(dataToProcess)}`);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(`${idVpnChannel}.${idChannel}.${preparedIp}`, client.unifi_device_info_from_ucore?.name || client.name || client.hostname, `${this.namespace}.${idVpnChannel}.${idChannel}.${preparedIp}.isOnline`, undefined, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idVpnChannel}.${idChannel}.${preparedIp}`, tree.client.get(), dataToProcess, this.config.clientStatesBlackList, this.config.clientStatesIsWhiteList, client, client, isAdapterStart);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\tcountBlacklisted++;\r\n\r\n\t\t\t\t\t\t\t\t\tconst id = `${!client.is_guest ? idChannel : idGuestChannel}.${client.mac}`\r\n\t\t\t\t\t\t\t\t\tif (await this.objectExists(id)) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(id, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} device '${name}' (mac: ${client.mac}) delete, ${this.config.clientIsWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\tthis.log.info(`${logPrefix} Discovered ${data.length} ${!isOfflineClients ? 'connected' : 'disconnected'} clients (clients: ${countClients}, guests: ${countGuests}, vpn: ${countVpn}, blacklisted: ${countBlacklisted})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.config.clientsEnabled && await this.objectExists(idChannel)) {\r\n\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} channel '${idChannel}' deleted`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.config.guestsEnabled && await this.objectExists(idGuestChannel)) {\r\n\t\t\t\t\tawait this.delObjectAsync(idGuestChannel, { recursive: true });\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} channel '${idGuestChannel}' deleted`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this.config.vpnEnabled && await this.objectExists(idVpnChannel)) {\r\n\t\t\t\t\tawait this.delObjectAsync(idVpnChannel, { recursive: true });\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} channel '${idVpnChannel}' deleted`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updatClientsOffline(data: myNetworkClient[], isAdapterStart: boolean = false) {\r\n\t\tconst logPrefix = '[updatClientsOffline]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (data) {\r\n\t\t\t\tlet result: myNetworkClient[] = [];\r\n\t\t\t\tfor (let client of data) {\r\n\t\t\t\t\tif (!this.cache.clients[client.mac] && !this.cache.clients[client.ip]) {\r\n\t\t\t\t\t\tresult.push(client);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tawait this.updateClients(result, isAdapterStart, true);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateIsOnlineState(isAdapterStart: boolean = false) {\r\n\t\tconst logPrefix = '[updateIsOnlineState]:';\r\n\r\n\t\ttry {\r\n\t\t\t//ToDo: vpn and perhaps device to include\r\n\t\t\tconst clients = await this.getStatesAsync(`${tree.client.idChannelUsers}.*.last_seen`);\r\n\t\t\tawait this._updateIsOnlineState(clients, this.config.clientOfflineTimeout, 'client', isAdapterStart);\r\n\r\n\t\t\tconst guests = await this.getStatesAsync(`${tree.client.idChannelGuests}.*.last_seen`);\r\n\t\t\tawait this._updateIsOnlineState(guests, this.config.clientOfflineTimeout, 'guest', isAdapterStart);\r\n\r\n\t\t\tconst vpn = await this.getStatesAsync(`${tree.client.idChannelVpn}.*.last_seen`);\r\n\t\t\tawait this._updateIsOnlineState(vpn, this.config.vpnOfflineTimeout, 'vpn', isAdapterStart);\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync _updateIsOnlineState(clients: Record<string, ioBroker.State>, offlineTimeout: number, typeOfClient: string, isAdapterStart: boolean = false) {\r\n\t\tconst logPrefix = '[_updateIsOnlineState]:';\r\n\r\n\t\ttry {\r\n\t\t\tfor (const id in clients) {\r\n\r\n\t\t\t\tconst lastSeen = clients[id];\r\n\t\t\t\tconst isOnline = await this.getStateAsync(`${myHelper.getIdWithoutLastPart(id)}.isOnline`);\r\n\t\t\t\tconst mac = await this.getStateAsync(`${myHelper.getIdWithoutLastPart(id)}.mac`);\r\n\t\t\t\tconst ip = await this.getStateAsync(`${myHelper.getIdWithoutLastPart(id)}.ip`);\r\n\r\n\t\t\t\tconst client = typeOfClient !== 'vpn' ? this.cache.clients[mac.val as string] : this.cache.vpn[ip.val as string];\r\n\r\n\t\t\t\tconst t = moment(isOnline.lc);\r\n\t\t\t\tconst before = moment(lastSeen.val as number * 1000);\r\n\t\t\t\tconst now = moment();\r\n\r\n\t\t\t\tif (!t.isBetween(before, now) || t.diff(before, 'seconds') <= 2) {\r\n\t\t\t\t\t// isOnline not changed between now an last reported last_seen val\r\n\t\t\t\t\tconst diff = now.diff(before, 'seconds');\r\n\t\t\t\t\tawait this.setState(`${myHelper.getIdWithoutLastPart(id)}.isOnline`, diff <= offlineTimeout, true);\r\n\r\n\t\t\t\t\tif (!isAdapterStart && diff > offlineTimeout && (isOnline.val !== diff <= offlineTimeout)) {\r\n\t\t\t\t\t\tthis.log.info(`${logPrefix} fallback detection - ${typeOfClient} '${client?.name}' (mac: ${client?.mac}, ip: ${client?.ip}) is offline, last_seen '${before.format('DD.MM. - HH:mm')}h' not updated since ${diff}s`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateWlanConfig(data: NetworkWlanConfig[] | NetworkWlanConfig_V2[], isAdapterStart: boolean = false): Promise<void> {\r\n\t\tconst logPrefix = '[updateWlanConfig]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.connected && this.isConnected) {\r\n\t\t\t\tconst idChannel = tree.wlan.idChannel;\r\n\r\n\t\t\t\tif (this.config.wlanConfigEnabled) {\r\n\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\tawait this.createOrUpdateChannel(idChannel, 'wlan', undefined, true);\r\n\t\t\t\t\t\tdata = (await this.ufn.getWlanConfig_V2()) as NetworkWlanConfig_V2[];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (data && data !== null) {\r\n\t\t\t\t\t\tlet countWlan = 0;\r\n\t\t\t\t\t\tlet countBlacklisted = 0;\r\n\r\n\t\t\t\t\t\tfor (let wlan of data) {\r\n\t\t\t\t\t\t\t// Convert API V2 to V1, because event is from type V1\r\n\t\t\t\t\t\t\tif ((wlan as NetworkWlanConfig_V2) && (wlan as NetworkWlanConfig_V2).configuration) {\r\n\t\t\t\t\t\t\t\twlan = { ...(wlan as NetworkWlanConfig_V2).configuration, ...(wlan as NetworkWlanConfig_V2).details, ...(wlan as NetworkWlanConfig_V2).statistics }\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\twlan = (wlan as NetworkWlanConfig);\r\n\r\n\t\t\t\t\t\t\tconst idWlan = `${idChannel}.${wlan._id}`;\r\n\r\n\t\t\t\t\t\t\tif ((!this.config.wlanIsWhiteList && !_.some(this.config.wlanBlackList, { id: wlan._id })) || (this.config.wlanIsWhiteList && _.some(this.config.wlanBlackList, { id: wlan._id }))) {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) countWlan++\r\n\r\n\t\t\t\t\t\t\t\tif (!this.cache.wlan[wlan._id]) {\r\n\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} Discovered WLAN '${wlan.name}'`);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataToProcess = wlan;\r\n\t\t\t\t\t\t\t\tif (this.cache.wlan[wlan._id]) {\r\n\t\t\t\t\t\t\t\t\t// filter out unchanged properties\r\n\t\t\t\t\t\t\t\t\tdataToProcess = myHelper.deepDiffBetweenObjects(wlan, this.cache.wlan[wlan._id], this, tree.wlan.getKeys()) as NetworkWlanConfig;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tthis.cache.wlan[wlan._id] = wlan;\r\n\r\n\t\t\t\t\t\t\t\tif (!_.isEmpty(dataToProcess)) {\r\n\t\t\t\t\t\t\t\t\tdataToProcess._id = wlan._id;\r\n\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(idWlan, wlan.name, `${this.namespace}.${idChannel}.${wlan._id}.enabled`, undefined, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(idWlan, tree.wlan.get(), dataToProcess, this.config.wlanStatesBlackList, this.config.wlanStatesIsWhiteList, wlan, wlan, isAdapterStart);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\tcountBlacklisted++\r\n\t\t\t\t\t\t\t\t\tif (await this.objectExists(idWlan)) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idWlan, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} WLAN '${wlan.name}' (id: ${wlan._id}) delete, ${this.config.wlanIsWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\tthis.log.info(`${logPrefix} Discovered ${data.length} WLAN's (WLAN's: ${countWlan}, blacklisted: ${countBlacklisted})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} '${idChannel}' deleted`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateWlanConnectedClients(isAdapterStart: boolean = false): Promise<void> {\r\n\t\tconst logPrefix = '[updateWlanConnectedClients]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.wlanConfigEnabled) {\r\n\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\tconst obj: ConnectedClients = { connected_clients: 0, connected_guests: 0, name: 'wlan' };\r\n\t\t\t\t\tawait this.createOrUpdateGenericState('wlan', tree.wlan.getGlobal(), obj, undefined, false, obj, obj, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sumClients = 0;\r\n\t\t\t\tlet sumGuests = 0;\r\n\r\n\t\t\t\tfor (let wlan_id in this.cache.wlan) {\r\n\t\t\t\t\tconst connectedClients = _.filter(this.cache.isOnline, (x) => x.val === true && x.wlan_id === wlan_id);\r\n\t\t\t\t\tthis.log.silly(`${logPrefix} WLAN '${this.cache.wlan[wlan_id].name}' (id: ${wlan_id}) connected ${!this.cache.wlan[wlan_id].is_guest ? 'clients' : 'guests'}: ${connectedClients.length}`);\r\n\r\n\t\t\t\t\tif (!this.cache.wlan[wlan_id].is_guest) {\r\n\t\t\t\t\t\tsumClients = sumClients + connectedClients.length;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsumGuests = sumGuests + connectedClients.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst id = `wlan.${wlan_id}.connected_${!this.cache.wlan[wlan_id].is_guest ? 'clients' : 'guests'}`\r\n\t\t\t\t\tif (await this.objectExists(id)) {\r\n\t\t\t\t\t\tthis.setStateChanged(id, connectedClients.length, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst idSumClients = 'wlan.connected_clients';\r\n\t\t\t\tif (await this.objectExists(idSumClients)) {\r\n\t\t\t\t\tthis.setStateChanged(idSumClients, sumClients, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst idSumGuests = 'wlan.connected_guests';\r\n\t\t\t\tif (await this.objectExists(idSumGuests)) {\r\n\t\t\t\t\tthis.setStateChanged(idSumGuests, sumGuests, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateLanConfig(data: NetworkLanConfig[] | NetworkLanConfig_V2[], isAdapterStart: boolean = false): Promise<void> {\r\n\t\tconst logPrefix = '[updateLanConfig]:';\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif (this.connected && this.isConnected) {\r\n\t\t\t\tconst idChannel = tree.lan.idChannel;\r\n\r\n\t\t\t\tif (this.config.lanConfigEnabled) {\r\n\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\tawait this.createOrUpdateChannel(idChannel, 'lan', undefined, true);\r\n\t\t\t\t\t\tdata = (await this.ufn.getLanConfig_V2()) as NetworkLanConfig_V2[];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (data && data !== null) {\r\n\t\t\t\t\t\tlet countLan = 0;\r\n\t\t\t\t\t\tlet countBlacklisted = 0;\r\n\r\n\t\t\t\t\t\tfor (let lan of data) {\r\n\r\n\t\t\t\t\t\t\t// Convert API V2 to V1, because event is from type V1\r\n\t\t\t\t\t\t\tif ((lan as NetworkLanConfig_V2) && (lan as NetworkLanConfig_V2).configuration) {\r\n\t\t\t\t\t\t\t\tlan = { ...(lan as NetworkLanConfig_V2).configuration, ...(lan as NetworkLanConfig_V2).details, ...(lan as NetworkLanConfig_V2).statistics }\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlan = (lan as NetworkLanConfig);\r\n\r\n\t\t\t\t\t\t\tconst idLan = `${idChannel}.${lan._id}`;\r\n\r\n\t\t\t\t\t\t\tif ((!this.config.lanIsWhiteList && !_.some(this.config.lanBlackList, { id: lan._id })) || (this.config.lanIsWhiteList && _.some(this.config.lanBlackList, { id: lan._id }))) {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) countLan++\r\n\r\n\t\t\t\t\t\t\t\tif (!this.cache.lan[lan._id]) {\r\n\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} Discovered LAN '${lan.name}'`);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataToProcess = lan;\r\n\t\t\t\t\t\t\t\tif (this.cache.lan[lan._id]) {\r\n\t\t\t\t\t\t\t\t\t// filter out unchanged properties\r\n\t\t\t\t\t\t\t\t\tdataToProcess = myHelper.deepDiffBetweenObjects(lan, this.cache.lan[lan._id], this, tree.lan.getKeys()) as NetworkLanConfig;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tthis.cache.lan[lan._id] = lan;\r\n\r\n\t\t\t\t\t\t\t\tif (!_.isEmpty(dataToProcess)) {\r\n\t\t\t\t\t\t\t\t\tdataToProcess._id = lan._id;\r\n\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(idLan, `${lan.name}${lan.vlan ? ` (${lan.vlan})` : ''}`, `${this.namespace}.${idChannel}.${lan._id}.enabled`, undefined, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(idLan, tree.lan.get(), dataToProcess, this.config.lanStatesBlackList, this.config.lanStatesIsWhiteList, lan, lan, isAdapterStart);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\tcountBlacklisted++\r\n\t\t\t\t\t\t\t\t\tif (await this.objectExists(idLan)) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idLan, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} LAN '${lan.name}' (id: ${lan._id}) delete, ${this.config.lanIsWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\tthis.log.info(`${logPrefix} Discovered ${data.length} LAN's (LAN's: ${countLan}, blacklisted: ${countBlacklisted})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} '${idChannel}' deleted`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateLanConnectedClients(isAdapterStart: boolean = false): Promise<void> {\r\n\t\tconst logPrefix = '[updateLanConnectedClients]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.lanConfigEnabled) {\r\n\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\tconst obj: ConnectedClients = { connected_clients: 0, connected_guests: 0, name: 'lan' };\r\n\t\t\t\t\tawait this.createOrUpdateGenericState('lan', tree.lan.getGlobal(), obj, undefined, false, obj, obj, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sumClients = 0;\r\n\t\t\t\tlet sumGuests = 0;\r\n\r\n\t\t\t\tfor (let lan_id in this.cache.lan) {\r\n\t\t\t\t\tconst connectedClients = _.filter(this.cache.isOnline, (x) => x.val === true && x.network_id === lan_id);\r\n\t\t\t\t\tthis.log.silly(`${logPrefix} LAN '${this.cache.lan[lan_id].name}' (id: ${lan_id}) connected ${this.cache.lan[lan_id].purpose !== 'guest' ? 'clients' : 'guests'}: ${connectedClients.length}`);\r\n\r\n\t\t\t\t\tif (this.cache.lan[lan_id].purpose !== 'guest') {\r\n\t\t\t\t\t\tsumClients = sumClients + connectedClients.length;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsumGuests = sumGuests + connectedClients.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst id = `lan.${lan_id}.connected_${this.cache.lan[lan_id].purpose !== 'guest' ? 'clients' : 'guests'}`\r\n\t\t\t\t\tif (await this.objectExists(id)) {\r\n\t\t\t\t\t\tthis.setStateChanged(id, connectedClients.length, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst idSumClients = 'lan.connected_clients';\r\n\t\t\t\tif (await this.objectExists(idSumClients)) {\r\n\t\t\t\t\tthis.setStateChanged(idSumClients, sumClients, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst idSumGuests = 'lan.connected_guests';\r\n\t\t\t\tif (await this.objectExists(idSumGuests)) {\r\n\t\t\t\t\tthis.setStateChanged(idSumGuests, sumGuests, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateFirewallGroup(data: FirewallGroup[], isAdapterStart: boolean = false): Promise<void> {\r\n\t\tconst logPrefix = '[updateFirewallGroup]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.connected && this.isConnected) {\r\n\t\t\t\tconst idChannel = tree.firewallGroup.idChannel;\r\n\r\n\t\t\t\tif (this.config.firewallGroupConfigEnabled) {\r\n\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\tawait this.createOrUpdateChannel(idChannel, 'firewall group', undefined, true);\r\n\t\t\t\t\t\tdata = (await this.ufn.getFirewallGroup()) as FirewallGroup[];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (data && data !== null) {\r\n\t\t\t\t\t\tlet countFirewallGroup = 0;\r\n\t\t\t\t\t\tlet countBlacklisted = 0;\r\n\r\n\t\t\t\t\t\tfor (let firewallGroup of data) {\r\n\t\t\t\t\t\t\tfirewallGroup = (firewallGroup as FirewallGroup);\r\n\r\n\t\t\t\t\t\t\tconst idFirewallGroup = `${idChannel}.${firewallGroup._id}`;\r\n\r\n\t\t\t\t\t\t\tif ((!this.config.firewallGroupIsWhiteList && !_.some(this.config.firewallGroupBlackList, { id: firewallGroup._id })) || (this.config.firewallGroupIsWhiteList && _.some(this.config.firewallGroupBlackList, { id: firewallGroup._id }))) {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) countFirewallGroup++\r\n\r\n\t\t\t\t\t\t\t\tif (!this.cache.firewallGroup[firewallGroup._id]) {\r\n\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} Discovered Firewall Group '${firewallGroup.name}'`);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataToProcess = firewallGroup;\r\n\t\t\t\t\t\t\t\tif (this.cache.firewallGroup[firewallGroup._id]) {\r\n\t\t\t\t\t\t\t\t\t// filter out unchanged properties\r\n\t\t\t\t\t\t\t\t\tdataToProcess = myHelper.deepDiffBetweenObjects(firewallGroup, this.cache.firewallGroup[firewallGroup._id], this, tree.firewallGroup.getKeys()) as FirewallGroup;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tthis.cache.firewallGroup[firewallGroup._id] = firewallGroup;\r\n\r\n\t\t\t\t\t\t\t\tif (!_.isEmpty(dataToProcess)) {\r\n\t\t\t\t\t\t\t\t\tdataToProcess._id = firewallGroup._id;\r\n\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(idFirewallGroup, `${firewallGroup.name}`, `${this.namespace}.${idChannel}.${firewallGroup._id}.enabled`, undefined, undefined, isAdapterStart, true);\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(idFirewallGroup, tree.firewallGroup.get(), dataToProcess, this.config.firewallGroupStatesBlackList, this.config.firewallGroupStatesIsWhiteList, firewallGroup, firewallGroup, isAdapterStart);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\tcountBlacklisted++\r\n\t\t\t\t\t\t\t\t\tif (await this.objectExists(idFirewallGroup)) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idFirewallGroup, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} Firewall Group '${firewallGroup.name}' (id: ${firewallGroup._id}) delete, ${this.config.firewallGroupIsWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\tthis.log.info(`${logPrefix} Discovered ${data.length} Firewall Group's (Firewall Group's: ${countFirewallGroup}, blacklisted: ${countBlacklisted})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} '${idChannel}' deleted`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated Download public data from ui with image url infos.\r\n\t */\r\n\tasync updateDevicesImages() {\r\n\t\tconst logPrefix = '[updateDevicesImages]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.deviceImageDownload) {\r\n\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tawait this.setObjectNotExistsAsync(`${tree.device.idChannel}.publicData`, {\r\n\t\t\t\t\ttype: 'state',\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\ttype: 'json',\r\n\t\t\t\t\t\tname: 'ui public json data',\r\n\t\t\t\t\t\texpert: true,\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: false,\r\n\t\t\t\t\t\trole: 'state'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: undefined\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst url = 'https://static.ui.com/fingerprint/ui/public.json'\r\n\t\t\t\tconst response = await this.fetch(url, { follow: 0 });\r\n\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tconst data: any = await response.json();\r\n\r\n\t\t\t\t\tif (data && data.devices) {\r\n\t\t\t\t\t\tawait this.setStateChangedAsync(`${tree.device.idChannel}.publicData`, JSON.stringify(data), true);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} error downloading image from '${url}', status: ${response.status}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateImages() {\r\n\t\tconst logPrefix = '[updateImages]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.deviceImageDownload) {\r\n\t\t\t\tconst clients = await this.getStatesAsync(`${tree.device.idChannel}.*.imageUrl`);\r\n\t\t\t\tawait this._updateClientsImages(clients)\r\n\t\t\t}\r\n\r\n\t\t\tif (this.config.clientImageDownload) {\r\n\r\n\t\t\t\tif (this.config.clientsEnabled) {\r\n\t\t\t\t\tconst clients = await this.getStatesAsync(`${tree.client.idChannelUsers}.*.imageUrl`);\r\n\t\t\t\t\tawait this._updateClientsImages(clients)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.config.guestsEnabled) {\r\n\t\t\t\t\tconst guests = await this.getStatesAsync(`${tree.client.idChannelGuests}.*.imageUrl`);\r\n\t\t\t\t\tawait this._updateClientsImages(guests)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync _updateClientsImages(objs: Record<string, ioBroker.State>) {\r\n\t\tconst logPrefix = '[_updateClientsImages]:';\r\n\r\n\t\ttry {\r\n\t\t\tlet imgCache: myImgCache = {}\r\n\r\n\t\t\tfor (const id in objs) {\r\n\t\t\t\tconst url = objs[id];\r\n\r\n\t\t\t\tif (url && url.val) {\r\n\t\t\t\t\tif (imgCache[url.val as string]) {\r\n\t\t\t\t\t\timgCache[url.val as string].push(myHelper.getIdWithoutLastPart(id))\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\timgCache[url.val as string] = [myHelper.getIdWithoutLastPart(id)]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const url in imgCache) {\r\n\t\t\t\tawait this.downloadImage(url, imgCache[url]);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Download image from a given url and update Channel icon if needed\r\n\t * @param url \r\n\t * @param idChannelList \r\n\t */\r\n\tasync downloadImage(url: string | null, idChannelList: string[]) {\r\n\t\tconst logPrefix = '[downloadImage]:';\r\n\r\n\t\ttry {\r\n\t\t\tlet base64ImgString = 'null';\t\t// ToDo: nicht sauber gel\u00F6st!\r\n\r\n\t\t\tif (url !== null) {\r\n\r\n\t\t\t\tconst response = await this.fetch(url, { follow: 0 });\r\n\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tconst imageBuffer = Buffer.from(await response.arrayBuffer());\r\n\t\t\t\t\tconst imageBase64 = imageBuffer.toString('base64');\r\n\t\t\t\t\tbase64ImgString = `data:image/png;base64,` + imageBase64;\r\n\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} image download successful -> update states: ${JSON.stringify(idChannelList)}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} error downloading image from '${url}', status: ${response.status}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (const idChannel of idChannelList) {\r\n\r\n\t\t\t\tif (await this.objectExists(`${idChannel}.image`)) {\r\n\t\t\t\t\tawait this.setStateChangedAsync(`${idChannel}.image`, base64ImgString, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (await this.objectExists(`${idChannel}`)) {\r\n\t\t\t\t\tawait this.createOrUpdateDevice(idChannel, undefined, `${idChannel}.isOnline`, undefined, base64ImgString, true, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconst mac = myHelper.getIdLastPart(idChannelList[0]);\r\n\r\n\t\t\tif (error instanceof FetchError) {\r\n\t\t\t\tthis.log.warn(`${logPrefix} [mac: ${mac}]: image download failed, reasign it directly via unifi-network controller`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.error(`${logPrefix} [mac: ${mac}, url: ${url}]: ${error}, stack: ${error.stack}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region Device, Channel, State Handlers\r\n\r\n\t/**\r\n\t * create or update a device object, update will only be done on adapter start\r\n\t * @param id \r\n\t * @param name \r\n\t * @param onlineId \r\n\t * @param icon \r\n\t * @param isAdapterStart\r\n\t */\r\n\tprivate async createOrUpdateDevice(id: string, name: string | undefined, onlineId: string, errorId: string = undefined, icon: string | undefined = undefined, isAdapterStart: boolean = false, logChanges: boolean = true): Promise<void> {\r\n\t\tconst logPrefix = '[createOrUpdateDevice]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst i18n = name ? myI18n.getTranslatedObject(name) : name;\r\n\r\n\t\t\tlet common = {\r\n\t\t\t\tname: name && Object.keys(i18n).length > 1 ? i18n : name,\r\n\t\t\t\ticon: icon\r\n\t\t\t};\r\n\r\n\t\t\tif (onlineId) {\r\n\t\t\t\tcommon['statusStates'] = {\r\n\t\t\t\t\tonlineId: onlineId\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (errorId) {\r\n\t\t\t\tcommon['statusStates']['errorId'] = errorId;\r\n\t\t\t}\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating device '${id}'`);\r\n\t\t\t\tawait this.setObjectAsync(id, {\r\n\t\t\t\t\ttype: 'device',\r\n\t\t\t\t\tcommon: common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\t\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\t\tif (!myHelper.isDeviceCommonEqual(obj.common as ioBroker.ChannelCommon, common)) {\r\n\t\t\t\t\t\t\tawait this.extendObject(id, { common: common });\r\n\r\n\t\t\t\t\t\t\tlet diff = myHelper.deepDiffBetweenObjects(common, obj.common, this);\r\n\t\t\t\t\t\t\tif (diff && diff.icon) diff.icon = _.truncate(diff.icon);\t// reduce base64 image string for logging\r\n\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} device updated '${id}' ${logChanges ? `(updated properties: ${JSON.stringify(diff)})` : ''}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * create or update a channel object, update will only be done on adapter start\r\n\t * @param id \r\n\t * @param name \r\n\t * @param onlineId \r\n\t * @param icon \r\n\t * @param isAdapterStart\r\n\t */\r\n\tprivate async createOrUpdateChannel(id: string, name: string, icon: string = undefined, isAdapterStart: boolean = false): Promise<void> {\r\n\t\tconst logPrefix = '[createOrUpdateChannel]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst i18n = name ? myI18n.getTranslatedObject(name) : name;\r\n\r\n\t\t\tlet common = {\r\n\t\t\t\tname: name && Object.keys(i18n).length > 1 ? i18n : name,\r\n\t\t\t\ticon: icon\r\n\t\t\t};\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating channel '${id}'`);\r\n\t\t\t\tawait this.setObjectAsync(id, {\r\n\t\t\t\t\ttype: 'channel',\r\n\t\t\t\t\tcommon: common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\t\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\t\tif (!myHelper.isChannelCommonEqual(obj.common as ioBroker.ChannelCommon, common)) {\r\n\t\t\t\t\t\t\tawait this.extendObject(id, { common: common });\r\n\r\n\t\t\t\t\t\t\tlet diff = myHelper.deepDiffBetweenObjects(common, obj.common, this);\r\n\t\t\t\t\t\t\tif (diff && diff.icon) diff.icon = _.truncate(diff.icon);\t// reduce base64 image string for logging\r\n\r\n\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} channel updated '${id}' (updated properties: ${JSON.stringify(diff)})`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync createOrUpdateGenericState(channel: string, treeDefinition: { [key: string]: myCommonState | myCommoneChannelObject | myCommonChannelArray } | myCommonState, objValues: NetworkDevice | myNetworkClient | NetworkWlanConfig | NetworkLanConfig | ConnectedClients | FirewallGroup, blacklistFilter: { id: string }[], isWhiteList: boolean, objDevices: NetworkDevice | myNetworkClient | NetworkWlanConfig | NetworkLanConfig | ConnectedClients | FirewallGroup, objChannel, isAdapterStart: boolean = false, filterId = '', isChannelOnWhitelist: boolean = false) {\r\n\t\tconst logPrefix = '[createOrUpdateGenericState]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.connected && this.isConnected) {\r\n\t\t\t\tfor (const key in treeDefinition) {\r\n\t\t\t\t\tlet logMsgState = `${channel}.${key}`.split('.')?.slice(1)?.join('.');\r\n\r\n\t\t\t\t\tlet logDetails = `${(objDevices as any)?.mac ? `mac: ${(objDevices as any)?.mac}` : (objDevices as any)?.ip ? `ip: ${(objDevices as any)?.ip}` : (objDevices as any)?._id ? `id: ${(objDevices as any)?._id}` : ''}`\r\n\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t// if we have an own defined state which takes val from other property\r\n\t\t\t\t\t\tconst valKey = Object.hasOwn(objValues, treeDefinition[key].valFromProperty) && treeDefinition[key].valFromProperty ? treeDefinition[key].valFromProperty : key\r\n\r\n\t\t\t\t\t\tconst cond1 = (Object.hasOwn(objValues, valKey) && objValues[valKey] !== undefined) || (Object.hasOwn(treeDefinition[key], 'id') && !Object.hasOwn(treeDefinition[key], 'valFromProperty'));\r\n\t\t\t\t\t\tconst cond2 = Object.hasOwn(treeDefinition[key], 'iobType') && !Object.hasOwn(treeDefinition[key], 'object') && !Object.hasOwn(treeDefinition[key], 'array');\r\n\t\t\t\t\t\tconst cond3 = (Object.hasOwn(treeDefinition[key], 'conditionToCreateState') && treeDefinition[key].conditionToCreateState(objChannel, this) === true) || !Object.hasOwn(treeDefinition[key], 'conditionToCreateState');\r\n\r\n\t\t\t\t\t\t// if (channel === 'devices.f4:e2:c6:55:55:e2' && (key === 'satisfaction' || valKey === 'satisfaction')) {\r\n\t\t\t\t\t\t// \tthis.log.warn(`cond 1: ${cond1}`);\r\n\t\t\t\t\t\t// \tthis.log.warn(`cond 2: ${cond2}`);\r\n\t\t\t\t\t\t// \tthis.log.warn(`cond 3: ${cond3}`)\r\n\t\t\t\t\t\t// \tthis.log.warn(`val: ${objValues[valKey]}`);\r\n\t\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t\tif (key && cond1 && cond2 && cond3) {\r\n\t\t\t\t\t\t\t// if we have a 'iobType' property, then it's a state\r\n\t\t\t\t\t\t\tlet stateId = key;\r\n\r\n\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'id')) {\r\n\t\t\t\t\t\t\t\t// if we have a custom state, use defined id\r\n\t\t\t\t\t\t\t\tstateId = treeDefinition[key].id;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlogMsgState = `${channel}.${stateId}`.split('.')?.slice(1)?.join('.');\r\n\r\n\t\t\t\t\t\t\tif ((!isWhiteList && !_.some(blacklistFilter, { id: `${filterId}${stateId}` })) || (isWhiteList && _.some(blacklistFilter, { id: `${filterId}${stateId}` })) || isChannelOnWhitelist || Object.hasOwn(treeDefinition[key], 'required')) {\r\n\t\t\t\t\t\t\t\tif (!await this.objectExists(`${channel}.${stateId}`)) {\r\n\t\t\t\t\t\t\t\t\t// create State\r\n\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} ${objDevices?.name} - creating state '${logMsgState}'`);\r\n\t\t\t\t\t\t\t\t\tconst obj = {\r\n\t\t\t\t\t\t\t\t\t\ttype: 'state',\r\n\t\t\t\t\t\t\t\t\t\tcommon: await this.getCommonGenericState(key, (treeDefinition as { [key: string]: myCommonState }), objDevices, logMsgState),\r\n\t\t\t\t\t\t\t\t\t\tnative: {}\r\n\t\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\t\t\t\tawait this.setObjectAsync(`${channel}.${stateId}`, obj);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t// update State if needed (only on adapter start)\r\n\t\t\t\t\t\t\t\t\tif (isAdapterStart) {\r\n\t\t\t\t\t\t\t\t\t\tconst obj: ioBroker.Object = await this.getObjectAsync(`${channel}.${stateId}`);\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst commonUpdated = await this.getCommonGenericState(key, (treeDefinition as { [key: string]: myCommonState }), objDevices, logMsgState);\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (!myHelper.isStateCommonEqual(obj.common as ioBroker.StateCommon, commonUpdated)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.extendObject(`${channel}.${stateId}`, { common: commonUpdated });\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} ${objDevices?.name} - updated common properties of state '${logMsgState}' (updated properties: ${JSON.stringify(myHelper.deepDiffBetweenObjects(commonUpdated, obj.common, this))})`);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!this.subscribedList.includes(`${channel}.${stateId}`) && ((treeDefinition[key].write && treeDefinition[key].write === true) || Object.hasOwn(treeDefinition[key], 'subscribeMe'))) {\r\n\t\t\t\t\t\t\t\t\t// state is writeable or has subscribeMe Property -> subscribe it\r\n\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} ${objDevices?.name} - subscribing state '${logMsgState}'`);\r\n\t\t\t\t\t\t\t\t\tawait this.subscribeStatesAsync(`${channel}.${stateId}`);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.subscribedList.push(`${channel}.${stateId}`);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (objValues && (Object.hasOwn(objValues, key) || (Object.hasOwn(objValues, treeDefinition[key].valFromProperty)))) {\r\n\t\t\t\t\t\t\t\t\tconst val = treeDefinition[key].readVal ? await treeDefinition[key].readVal(objValues[valKey], this, this.cache, objDevices, `${channel}.${stateId}`) : objValues[valKey];\r\n\r\n\t\t\t\t\t\t\t\t\tlet changedObj: any = undefined\r\n\r\n\t\t\t\t\t\t\t\t\tif (key === 'last_seen' || key === 'first_seen' || key === 'rundate') {\r\n\t\t\t\t\t\t\t\t\t\t// set lc to last_seen value\r\n\t\t\t\t\t\t\t\t\t\tchangedObj = await this.setStateChangedAsync(`${channel}.${stateId}`, { val: val, lc: val * 1000 }, true);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tchangedObj = await this.setStateChangedAsync(`${channel}.${stateId}`, val, true);\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif (!isAdapterStart && changedObj && Object.hasOwn(changedObj, 'notChanged') && !changedObj.notChanged) {\r\n\t\t\t\t\t\t\t\t\t\tthis.log.silly(`${logPrefix} value of state '${logMsgState}' changed to ${val}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif (!Object.hasOwn(treeDefinition[key], 'id')) {\r\n\t\t\t\t\t\t\t\t\t\t// only report it if it's not a custom defined state\r\n\t\t\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} ${objDevices?.name} - property '${logMsgState}' not exists in bootstrap values (sometimes this option may first need to be activated / used in the Unifi Network application or will update by an event)`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// channel is on blacklist\r\n\t\t\t\t\t\t\t\t// delete also at runtime, because some properties are only available on websocket data\r\n\t\t\t\t\t\t\t\tif (await this.objectExists(`${channel}.${stateId}`)) {\r\n\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(`${channel}.${stateId}`);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} '${objDevices?.name}' ${logDetails ? `(${logDetails}) ` : ''}state '${channel}.${stateId}' delete, ${isWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// it's a channel from type object\r\n\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'object') && Object.hasOwn(objValues, key)) {\r\n\t\t\t\t\t\t\t\tconst idChannelAppendix = Object.hasOwn(treeDefinition[key], 'idChannel') ? treeDefinition[key].idChannel : key\r\n\t\t\t\t\t\t\t\tconst idChannel = `${channel}.${idChannelAppendix}`;\r\n\r\n\t\t\t\t\t\t\t\tif ((!isWhiteList && !_.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` })) || (isWhiteList && _.some(blacklistFilter, (x) => x.id.startsWith(`${filterId}${idChannelAppendix}`))) || Object.hasOwn(treeDefinition[key], 'required')) {\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${idChannel}`, Object.hasOwn(treeDefinition[key], 'channelName') ? treeDefinition[key].channelName(objDevices, objChannel, this) : key, Object.hasOwn(treeDefinition[key], 'icon') ? treeDefinition[key].icon : undefined, true);\r\n\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idChannel}`, treeDefinition[key].object, objValues[key], blacklistFilter, isWhiteList, objDevices, objChannel[key], isAdapterStart, `${filterId}${idChannelAppendix}.`, isWhiteList && _.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` }));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t// channel is on blacklist\r\n\t\t\t\t\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} '${objDevices?.name}' ${logDetails ? `(${logDetails}) ` : ''}channel '${idChannel}' delete, ${isWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// it's a channel from type array\r\n\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'array') && Object.hasOwn(objValues, key)) {\r\n\r\n\t\t\t\t\t\t\t\tif (objValues[key] !== null && objValues[key].length > 0) {\r\n\t\t\t\t\t\t\t\t\tconst idChannelAppendix = Object.hasOwn(treeDefinition[key], 'idChannel') ? treeDefinition[key].idChannel : key\r\n\t\t\t\t\t\t\t\t\tconst idChannel = `${channel}.${idChannelAppendix}`;\r\n\r\n\t\t\t\t\t\t\t\t\tif ((!isWhiteList && !_.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` })) || (isWhiteList && _.some(blacklistFilter, (x) => x.id.startsWith(`${filterId}${idChannelAppendix}`))) || Object.hasOwn(treeDefinition[key], 'required')) {\r\n\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${idChannel}`, Object.hasOwn(treeDefinition[key], 'channelName') ? treeDefinition[key].channelName(objDevices, objChannel, this) : key, Object.hasOwn(treeDefinition[key], 'icon') ? treeDefinition[key].icon : undefined, isAdapterStart);\r\n\r\n\t\t\t\t\t\t\t\t\t\tconst arrayNumberAdd = Object.hasOwn(treeDefinition[key], 'arrayStartNumber') ? treeDefinition[key].arrayStartNumber : 0\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i <= objValues[key].length - 1; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet nr = i + arrayNumberAdd;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (objValues[key][i] !== null && objValues[key][i] !== undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet idChannelArray: string | undefined = myHelper.zeroPad(nr, treeDefinition[key].arrayChannelIdZeroPad || 0);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (Object.hasOwn(treeDefinition[key], 'arrayChannelIdFromProperty')) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tidChannelArray = treeDefinition[key].arrayChannelIdFromProperty(objChannel[key][i], i, this);\r\n\t\t\t\t\t\t\t\t\t\t\t\t} else if (Object.hasOwn(treeDefinition[key], 'arrayChannelIdPrefix')) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tidChannelArray = treeDefinition[key].arrayChannelIdPrefix + myHelper.zeroPad(nr, treeDefinition[key].arrayChannelIdZeroPad || 0);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (idChannelArray !== undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${idChannel}.${idChannelArray}`, Object.hasOwn(treeDefinition[key], 'arrayChannelNameFromProperty') ? treeDefinition[key].arrayChannelNameFromProperty(objChannel[key][i], this) : treeDefinition[key].arrayChannelNamePrefix + nr || nr.toString(), undefined, true)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idChannel}.${idChannelArray}`, treeDefinition[key].array, objValues[key][i], blacklistFilter, isWhiteList, objDevices, objChannel[key][i], true, `${filterId}${idChannelAppendix}.`, isWhiteList && _.some(blacklistFilter, { id: `${filterId}${idChannelAppendix}` }));\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t// channel is on blacklist, wlan is comming from realtime api\r\n\t\t\t\t\t\t\t\t\t\tif (await this.objectExists(idChannel)) {\r\n\t\t\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(idChannel, { recursive: true });\r\n\t\t\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} '${objDevices?.name}' ${logDetails ? `(${logDetails}) ` : ''}channel '${idChannel}' delete, ${isWhiteList ? 'it\\'s not on the whitelist' : 'it\\'s on the blacklist'}`);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tthis.log.error(`${logPrefix} [id: ${key}, ${logDetails ? `${logDetails}, ` : ''}key: ${key}] error: ${error}, stack: ${error.stack}, data: ${JSON.stringify(objValues[key])}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync getCommonGenericState(id: string, treeDefinition: { [key: string]: myCommonState }, objDevices, logMsgState: string) {\r\n\t\tconst logPrefix = '[getCommonGenericState]:';\r\n\r\n\t\ttry {\r\n\t\t\t// i18x translation if exists\r\n\t\t\tconst i18n = myI18n.getTranslatedObject(treeDefinition[id].name || id);\r\n\t\t\tconst name = Object.keys(i18n).length > 1 ? i18n : (treeDefinition[id].name || id);\r\n\r\n\t\t\tconst common: ioBroker.StateCommon = {\r\n\t\t\t\tname: name,\r\n\t\t\t\ttype: treeDefinition[id].iobType,\r\n\t\t\t\tread: (treeDefinition[id].read !== undefined) ? treeDefinition[id].read : true,\r\n\t\t\t\twrite: (treeDefinition[id].write !== undefined) ? treeDefinition[id].write : false,\r\n\t\t\t\trole: treeDefinition[id].role ? treeDefinition[id].role : 'state',\r\n\t\t\t};\r\n\r\n\t\t\tif (treeDefinition[id].unit) common.unit = treeDefinition[id].unit;\r\n\r\n\t\t\tif (treeDefinition[id].min || treeDefinition[id].min === 0) common.min = treeDefinition[id].min;\r\n\r\n\t\t\tif (treeDefinition[id].max || treeDefinition[id].max === 0) common.max = treeDefinition[id].max;\r\n\r\n\t\t\tif (treeDefinition[id].step) common.step = treeDefinition[id].step;\r\n\r\n\t\t\tif (treeDefinition[id].expert) common.expert = treeDefinition[id].expert;\r\n\r\n\t\t\tif (treeDefinition[id].def || treeDefinition[id].def === 0 || treeDefinition[id].def === false) common.def = treeDefinition[id].def;\r\n\r\n\t\t\tif (treeDefinition[id].states) {\r\n\t\t\t\tcommon.states = treeDefinition[id].states;\r\n\t\t\t} else if (Object.hasOwn(treeDefinition[id], 'statesFromProperty')) {\r\n\t\t\t\tconst statesFromProp = myHelper.getAllowedCommonStates(treeDefinition[id].statesFromProperty, objDevices);\r\n\r\n\t\t\t\tcommon.states = statesFromProp;\r\n\t\t\t\tthis.log.debug(`${logPrefix} ${objDevices?.name} - set allowed common.states for '${logMsgState}' (from: ${treeDefinition[id].statesFromProperty})`);\r\n\t\t\t}\r\n\r\n\t\t\tif (treeDefinition[id].desc) common.desc = treeDefinition[id].desc;\r\n\r\n\t\t\treturn common;\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t//#endregion\r\n\r\n\t//#region WS Listener\r\n\r\n\t/**\r\n\t * Websocket pong received, sets the aliveTimestamp to the current timestamp\r\n\t */\r\n\tasync onPongMessage(): Promise<void> {\r\n\t\tconst logPrefix = '[onPongMessage]:';\r\n\r\n\t\ttry {\r\n\t\t\tthis.aliveTimestamp = moment().valueOf();\r\n\t\t\tthis.log.silly('ping pong');\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkMessage(event: NetworkEventDevice | NetworkEventClient | NetworkEvent | NetworkEventSpeedTest | NetworkEventFirewallGroup) {\r\n\t\tconst logPrefix = '[onNetworkMessage]:';\r\n\r\n\t\ttry {\r\n\t\t\tthis.aliveTimestamp = moment().valueOf();\r\n\r\n\t\t\tif (event.meta.message === WebSocketEventMessages.device) {\r\n\t\t\t\tawait this.updateDevices(event.data as NetworkDevice[]);\r\n\t\t\t} else if (event.meta.message.startsWith(WebSocketEventMessages.client)) {\r\n\t\t\t\tif (event.meta.message.endsWith(':sync')) {\r\n\t\t\t\t\tawait this.updateClients(event.data as myNetworkClient[]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait this.onNetworkClientEvent(event as NetworkEventClient);\r\n\t\t\t\t}\r\n\t\t\t} else if (event.meta.message === WebSocketEventMessages.events) {\r\n\t\t\t\tawait this.onNetworkEvent(event as NetworkEvent);\r\n\t\t\t} else if (event.meta.message.startsWith(WebSocketEventMessages.user)) {\r\n\t\t\t\tawait this.onNetworkUserEvent(event as NetworkEventClient);\r\n\t\t\t} else if (event.meta.message.startsWith(WebSocketEventMessages.wlanConf)) {\r\n\t\t\t\tawait this.onNetworkWlanConfEvent(event as NetworkEventWlanConfig);\r\n\t\t\t} else if (event.meta.message.startsWith(WebSocketEventMessages.lanConf)) {\r\n\t\t\t\tawait this.onNetworkLanConfEvent(event as NetworkEventLanConfig);\r\n\t\t\t} else if (event.meta.message === WebSocketEventMessages.speedTest) {\r\n\t\t\t\tawait this.onNetworkSpeedTestEvent(event as NetworkEventSpeedTest);\r\n\t\t\t} else if (event.meta.message.startsWith(WebSocketEventMessages.firewallGroup)) {\r\n\t\t\t\tawait this.onNetworkFirewallGroupEvent(event as NetworkEventFirewallGroup);\r\n\t\t\t} else {\r\n\t\t\t\tif (!this.eventsToIgnore.includes(event.meta.message)) {\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} meta: ${JSON.stringify(event.meta)} not implemented! data: ${JSON.stringify(event.data)}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if (!event.meta.message.includes('unifi-device:sync') && !event.meta.message.includes('session-metadata:sync')) {\r\n\r\n\t\t\t\t// }\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkEvent(event: NetworkEvent) {\r\n\t\tconst logPrefix = '[onNetworkEvent]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (event && event.data) {\r\n\t\t\t\tfor (const myEvent of event.data) {\r\n\t\t\t\t\tif (WebSocketEvent.client.Connected.includes(myEvent.key) || WebSocketEvent.client.Disconnected.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// Client connect or disconnect\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'connected / disconnected' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.client.connected(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.client.Roamed.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// Client roamed between AP's\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'roamed' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.client.roamed(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.client.RoamedRadio.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// Client roamed radio -> change channel\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'roamed radio' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.client.roamedRadio(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.client.Blocked.includes(myEvent.key) || WebSocketEvent.client.Unblocked.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// Client blocked or unblocked\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'block / unblock' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.client.block(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.Restarted.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// Device connect or disconnect\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'restarted' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.device.restarted(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.Connected.includes(myEvent.key) || WebSocketEvent.device.Disconnected.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// Device restarted\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'connected / disconnected' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.device.connected(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.LostContact.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// Device lost contact\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'lost contact' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.device.lostContact(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.WANTransition.includes(myEvent.key)) {\r\n\t\t\t\t\t\t// WAN ISP Connection changed\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'wan transition' (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t\teventHandler.device.wanTransition(event.meta, myEvent, this, this.cache);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.ChannelChanged.includes(myEvent.key)) {\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'AP channel changed' - not implemented (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.PoeDisconnect.includes(myEvent.key)) {\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'poe disconnect' - not implemented (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.Upgrade.includes(myEvent.key)) {\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'upgrade' - not implemented (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t} else if (WebSocketEvent.device.Adopt.includes(myEvent.key)) {\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'adopt' - not implemented (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.log.warn(`${logPrefix} not implemented event (${myEvent.key ? `key: ${myEvent.key},` : ''}) - Please report this to the developer and creating an issue on github! (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(myEvent)})`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkClientEvent(events: NetworkEventClient) {\r\n\t\tconst logPrefix = '[onNetworkClientEvent]:';\r\n\r\n\t\ttry {\r\n\r\n\t\t\tif (events.meta.message.endsWith(':disconnected')) {\r\n\t\t\t\tfor (const event of events.data) {\r\n\t\t\t\t\tif (event.type === 'VPN') {\r\n\t\t\t\t\t\t// VPN disconnect\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} event 'vpn disconnected' (meta: ${JSON.stringify(events.meta)}, data: ${JSON.stringify(event)})`);\r\n\r\n\t\t\t\t\t\teventHandler.client.vpnDisconnect(events.meta, event as myNetworkClient, this, this.cache);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.log.warn(`${logPrefix} not implemented event - Please report this to the developer and creating an issue on github! (meta: ${JSON.stringify(events.meta)}, data: ${JSON.stringify(event)})`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.warn(`${logPrefix} not implemented event - Please report this to the developer and creating an issue on github! (meta: ${JSON.stringify(events.meta)}, data: ${JSON.stringify(events.data)})`);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkUserEvent(events: NetworkEventClient) {\r\n\t\tconst logPrefix = '[onNetworkUserEvent]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.clientsEnabled || this.config.guestsEnabled || this.config.vpnEnabled) {\r\n\t\t\t\tif (events && events.data) {\r\n\t\t\t\t\tfor (let event of events.data) {\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} client event (meta: ${JSON.stringify(events.meta)}, data: ${JSON.stringify(event)})`);\r\n\r\n\t\t\t\t\t\tif (events.meta.message === 'user:delete') {\r\n\t\t\t\t\t\t\t// client removed client from unifi-controller\r\n\t\t\t\t\t\t\teventHandler.user.clientRemoved(events.meta, event, this, this.cache);\r\n\t\t\t\t\t\t} else if (events.meta.message === 'user:sync') {\r\n\t\t\t\t\t\t\t// client updated\r\n\t\t\t\t\t\t\tconst name = event.unifi_device_info_from_ucore?.name || event.display_name || event.name || event.hostname;\r\n\t\t\t\t\t\t\tconst idChannel = !event.is_guest ? tree.client.idChannelUsers : tree.client.idChannelGuests;\r\n\r\n\t\t\t\t\t\t\tevent.last_seen = event.last_seen >= this.cache.clients[event.mac]?.last_seen ? event.last_seen : this.cache.clients[event.mac]?.last_seen;\r\n\r\n\t\t\t\t\t\t\tif ((!this.config.clientIsWhiteList && !_.some(this.config.clientBlackList, { mac: event.mac })) || (this.config.clientIsWhiteList && _.some(this.config.clientBlackList, { mac: event.mac }))) {\r\n\t\t\t\t\t\t\t\tthis.log.debug(`${logPrefix} update ${!event.is_guest ? 'client' : 'guest'} '${this.cache.clients[event.mac]?.name}'`);\r\n\r\n\t\t\t\t\t\t\t\tawait this.createOrUpdateDevice(`${idChannel}.${event.mac}`, name, `${this.namespace}.${idChannel}.${event.mac}.isOnline`, undefined, undefined, true);\r\n\t\t\t\t\t\t\t\tawait this.createOrUpdateGenericState(`${idChannel}.${event.mac}`, tree.client.get(), event as myNetworkClient, this.config.clientStatesBlackList, this.config.clientStatesIsWhiteList, this.cache.clients[event.mac], this.cache.clients[event.mac], true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkWlanConfEvent(event: NetworkEventWlanConfig) {\r\n\t\tconst logPrefix = '[onNetworkWlanConfEvent]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.wlanConfigEnabled) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} wlan conf event (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(event.data)})`);\r\n\r\n\t\t\t\tif (event.meta.message.endsWith(':delete')) {\r\n\t\t\t\t\teventHandler.wlanConf.deleted(event.meta, event.data, this, this.cache);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait this.updateWlanConfig(event.data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkLanConfEvent(event: NetworkEventLanConfig) {\r\n\t\tconst logPrefix = '[onNetworkLanConfEvent]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.lanConfigEnabled) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} lan conf event (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(event.data)})`);\r\n\r\n\t\t\t\tif (event.meta.message.endsWith(':delete')) {\r\n\t\t\t\t\teventHandler.lanConf.deleted(event.meta, event.data, this, this.cache);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait this.updateLanConfig(event.data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkFirewallGroupEvent(event: NetworkEventFirewallGroup) {\r\n\t\tconst logPrefix = '[onNetworkFirewallGroupEvent]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.firewallGroupConfigEnabled) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} firewall group event (meta: ${JSON.stringify(event.meta)}, data: ${JSON.stringify(event.data)})`);\r\n\r\n\t\t\t\tif (event.meta.message.endsWith(':delete')) {\r\n\t\t\t\t\teventHandler.firewallGroup.deleted(event.meta, event.data, this, this.cache);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait this.updateFirewallGroup(event.data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync onNetworkSpeedTestEvent(event: NetworkEventSpeedTest) {\r\n\t\tconst logPrefix = '[onNetworkSpeedTestEvent]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.devicesEnabled) {\r\n\t\t\t\tawait eventHandler.device.speedTest(event, this, this.cache);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t//#endregion\r\n}\r\n\r\n// replace only needed for dev system\r\nconst modulePath = url.fileURLToPath(import.meta.url).replace('/development/', '/node_modules/');\r\n\r\nif (process.argv[1] === modulePath) {\r\n\t// start the instance directly\r\n\tnew UnifiNetwork();\r\n}\r\nexport default function startAdapter(options: Partial<utils.AdapterOptions> | undefined) {\r\n\t// compact mode\r\n\treturn new UnifiNetwork(options);\r\n}"],
  "mappings": "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",
  "names": ["mac", "idChannel", "url"]
}
